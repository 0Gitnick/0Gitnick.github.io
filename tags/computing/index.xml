<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computing on Nicholas Johnson</title><link>https://0gitnick.xyz/tags/computing/</link><description>Recent content in computing on Nicholas Johnson</description><language>en</language><lastBuildDate>Sun, 07 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://0gitnick.xyz/tags/computing/index.xml" rel="self" type="application/rss+xml"/><item><title>[Video] You Should Delete Your Whatsapp ASAP</title><link>https://0gitnick.xyz/video-you-should-delete-your-whatsapp-asap/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/video-you-should-delete-your-whatsapp-asap/</guid><description>&lt;p>&lt;a href="https://redirect.invidious.io/channel/UCjr2bPAyPV7t35MvcgT3W8Q">TheHatedOne&lt;/a> tells us why no one should be using Whatsapp.&lt;/p>
&lt;p>&lt;a href="https://redirect.invidious.io/watch?v=shpiVm1qpnw&amp;amp;dark_mode=true&amp;amp;autoplay=1">[Video Link]&lt;/a>&lt;/p>
&lt;h2 id="matrix">Matrix&lt;/h2>
&lt;p>The only gripe I have about the video is the same one I had in &lt;a href="../../video-fixing-social-media-for-good">Fixing Social Media for Good&lt;/a>. While &lt;a href="https://matrix.org/">Matrix&lt;/a> is &lt;a href="https://en.wikipedia.org/wiki/Federation_%28information_technology%29">federated&lt;/a> and infinitely better than Whatsapp, federation still tends toward centralization. Also Matrix &lt;em>doesn&amp;rsquo;t&lt;/em> protect metadata either and as TheHatedOne mentions, leaking metadata is really bad for a communications platform even if data is protected.&lt;/p>
&lt;h2 id="signal">Signal&lt;/h2>
&lt;p>&lt;a href="https://www.signal.org/">Signal&lt;/a> says it protects metadata, but there&amp;rsquo;s no way for users to verify that besides taking Signal&amp;rsquo;s word for it &lt;em>and&lt;/em> Signal is centralized. So neither Signal nor Matrix are the &lt;em>final&lt;/em> solution to secure communications.&lt;/p>
&lt;h2 id="cwtch">Cwtch&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Peer-to-peer">Peer to peer&lt;/a> is the best solution because there&amp;rsquo;s no way for it to tend towards centralization. Once &lt;a href="https://cwtch.im/">cwtch.im&lt;/a> (Cwtch is Welsh for hug/cuddle) is stable it will probably be the best peer to peer instant messaging solution since it can &lt;em>verifiably&lt;/em> protect metadata and have encrypted group conversations. It&amp;rsquo;s also built on &lt;a href="https://en.wikipedia.org/wiki/Tor_%28anonymity_network%29">Tor&lt;/a> which is the most tested, most researched and most used anonymity network out there.&lt;/p></description></item><item><title>Dead Man's Switch</title><link>https://0gitnick.xyz/dead-mans-switch/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/dead-mans-switch/</guid><description>&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>There are &lt;em>many&lt;/em> kinds of dead man&amp;rsquo;s switches (abbreviated here as DMS). The DMS&amp;rsquo;s this post is concerned with are &lt;a href="https://en.wikipedia.org/wiki/Dead_man's_switch#Software">software-based&lt;/a>. More specifically this post is concerned with what I will call Wikileaks/Mr. Robot style DMS&amp;rsquo;s.&lt;/p>
&lt;p>&lt;a href="https://wikileaks.org/">Wikileaks&lt;/a> is a non-profit that has a history of publishing highly classified news leaks obtained through anonymous sources. In order to protect the leaks, some are prereleased in encrypted form with the decryption key rigged to self-publish in case the operations of Wikileaks are obstructed in the meantime.&lt;/p>
&lt;p>DMS&amp;rsquo;s are also used 3 times in the TV series &lt;a href="https://mrrobot.fandom.com">Mr. Robot&lt;/a>. One is first used by &lt;a href="https://mrrobot.fandom.com/wiki/Elliot_Alderson">Elliot Alderson&lt;/a> threatening to leak &lt;a href="https://mrrobot.fandom.com/wiki/Fernando_Vera">Fernando Vera&lt;/a>&amp;rsquo;s drug supplying operation to protect his dealer sweetheart &lt;a href="https://mrrobot.fandom.com/wiki/Shayla_Nico">Shayla&lt;/a> (&lt;a href="https://mrrobot.fandom.com/wiki/Eps1.6_v1ew-s0urce.flv">S1E6&lt;/a>). The second is in the form of an email from &lt;a href="https://mrrobot.fandom.com/wiki/Trenton">Trenton&lt;/a> to Elliot hinting how to undo the 5/9 hack (&lt;a href="https://mrrobot.fandom.com/wiki/Eps3.8_stage3.torrent">S3E8&lt;/a>). The last comes again from Elliot threatening to leak information to hurt the antagonist &lt;a href="https://mrrobot.fandom.com/wiki/Whiterose">White Rose&lt;/a> (&lt;a href="https://mrrobot.fandom.com/wiki/Shutdown_-r">S3E10&lt;/a>).&lt;/p>
&lt;p>There are 2 key elements common to the DMS&amp;rsquo;s I&amp;rsquo;ve referenced so far:&lt;/p>
&lt;ol>
&lt;li>A person or group that stands to lose something if private information is published.&lt;/li>
&lt;li>An adversary that rigs private information to self-publish unless deactivated.&lt;/li>
&lt;/ol>
&lt;p>Now I&amp;rsquo;ll consider the potential uses for such a device.&lt;/p>
&lt;h2 id="use-cases">Use Cases&lt;/h2>
&lt;h4 id="self-defense">Self-Defense&lt;/h4>
&lt;p>The first use case that comes to mind for a Wikileaks/Mr. Robot style DMS is &lt;em>self-defense&lt;/em>. If you learn something others want to keep private, you could be in danger. You &amp;ldquo;know too much&amp;rdquo;. From organized crime to classified government documents the most obvious way to deal with someone who knows too much is to have them killed, assuming you have let&amp;rsquo;s say a &lt;em>highly questionable&lt;/em> moral compass. Dead men tell no tales.&lt;/p>
&lt;p>A DMS is a way of turning the &amp;ldquo;knowing too much&amp;rdquo; problem on its head. It&amp;rsquo;s especially useful for dissidents and independent journalists that regularly find themselves pitted against powerful multinational corporations, &lt;a href="https://www.theguardian.com/us-news/2020/dec/07/florida-police-raid-data-scientist-coronavirus">the state&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Jeffrey_Epstein">large criminal enterprises&lt;/a>. It can be used as a bargaining chip to protect yourself and those you care about. If anyone you care about is harmed the private information is assured to leak, so instead of &amp;ldquo;dead men tell no tales&amp;rdquo; it becomes &amp;ldquo;living men tell no tales&amp;rdquo;.&lt;/p>
&lt;p>&lt;strong>You should carefully consider before using one. They have the potential to be effective &lt;em>only&lt;/em> if used correctly&lt;/strong>. You might ask &lt;strong>what is the value of the leak?&lt;/strong> The final time Elliot used one in Mr. Robot the threat of the leak wasn&amp;rsquo;t devastating enough to protect him from White Rose. Elliot was only able to save himself by proving he had worth. It&amp;rsquo;s also important to consider &lt;strong>how long will the leak hold value?&lt;/strong> After Vera&amp;rsquo;s operation was over he stood to lose &lt;em>nothing&lt;/em> from Elliot&amp;rsquo;s leak. Elliot was again saved only because of his value, not his DMS. The lesson there is to be thoughtful before using one.&lt;/p>
&lt;h4 id="leak-defense">Leak Defense&lt;/h4>
&lt;p>The next use case is to protect the leak itself. When the leak is obtained from an anonymous source it&amp;rsquo;s disorganized and hard to read. So before Wikileaks publishes a leak they have to &lt;a href="https://en.wikipedia.org/wiki/Data_curation">curate&lt;/a> the content. But there&amp;rsquo;s a danger that while they&amp;rsquo;re doing that the leak could be seized or destroyed by an adversary. To mitigate that they can set up a DMS so the data will get published either way. Then the adversary no longer has any incentive to interfere with the data curation process.&lt;/p>
&lt;h4 id="offense">Offense&lt;/h4>
&lt;p>As for &lt;em>offense&lt;/em>, it doesn&amp;rsquo;t make as much sense to use a DMS. Even though it &lt;em>could&lt;/em> be used illegally for blackmail or extortion it would only be &lt;em>necessary&lt;/em> if the offender was concerned about ending up in a situation where they can&amp;rsquo;t leak the information. At that point they&amp;rsquo;d probably be more interested in self-defense than offense anyway. Unless there are circumstances I&amp;rsquo;m overlooking then Wikileaks/Mr. Robot style DMS&amp;rsquo;s aren&amp;rsquo;t very useful for offense.&lt;/p>
&lt;p>For the rest of this post I&amp;rsquo;m going to focus only on the self-defense use case.&lt;/p>
&lt;h2 id="theory-and-practicea-nametheory_and_practicea">Theory and Practice&lt;a name="Theory_and_Practice">&lt;/a>&lt;/h2>
&lt;h4 id="in-theory">In Theory&lt;/h4>
&lt;p>In theory &lt;strong>the DMS represents a sequential, &lt;a href="https://en.wikipedia.org/wiki/Non-cooperative_game">noncooperative game&lt;/a> between 2 players&lt;/strong>. Player 1 (the defender) chooses between leaking Player 2&amp;rsquo;s secrets and doing nothing. Player 2 (the attacker) chooses between violence against Player 1 and doing nothing. Both players are assumed to be rational. Here are the payoffs for each strategy:&lt;/p>
&lt;ol>
&lt;li>If Player 2 &lt;em>commits violence&lt;/em> then
&lt;ol>
&lt;li>Player 1 loses 2 points (harm)&lt;/li>
&lt;li>Player 2 gains 1 point (retribution)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If Player 1 &lt;em>leaks data&lt;/em> then
&lt;ol>
&lt;li>Player 2 loses 2 points (harm)&lt;/li>
&lt;li>Player 1 gains 1 point (retribution)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>This point structure assumes both Players value retribution but not as much as avoiding harm. Both Players assume the other will adopt the strategy of maximizing their own points. Using the &lt;a href="https://en.wikipedia.org/wiki/Minimax#Example_2">Minimax&lt;/a> algorithm it can be determined that both Players will do nothing. Any other action would result in both players having less points. Points are represented for each Player in the format (P1,P2) in the decision tree below:&lt;/p>
&lt;p>&lt;img src="../../decision_tree.jpg" alt="decision_tree">&lt;/p>
&lt;h4 id="in-practice">In Practice&lt;/h4>
&lt;p>In practice there are a number of complicating factors. Player 2 may not know exactly what the leaks contain making it impossible to value the &lt;em>cost&lt;/em> of violence. Player 1 can create the &lt;em>perception&lt;/em> of cost but in reality not even set up the switch &lt;em>or&lt;/em> set one up incorrectly so it doesn&amp;rsquo;t work &lt;em>or&lt;/em> simply forget to deactivate it thus triggering it. Player 2 may find a way to disarm it. To account for the real-world outcomes you would need a much larger decision tree. And even then what are the chances that both players act rationally? So don&amp;rsquo;t think that a DMS is guaranteed to be effective.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>If you still want to configure a DMS the first thing to consider is how to format the data you wish to include.&lt;/p>
&lt;h4 id="luks2">Luks2&lt;/h4>
&lt;p>If you&amp;rsquo;re gathering data to be included in the leak on an ongoing basis then you should probably use an encrypted disk image file. I recommend using &lt;a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS2&lt;/a> for the encrypted disk image. There are plenty of tutorials out there on how to use it so I won&amp;rsquo;t be going over that in this post. To leak the data is easy. Just publish the encryption slot passphrase.&lt;/p>
&lt;h4 id="gnupg2">GnuPG2&lt;/h4>
&lt;p>If instead you already have all the data you&amp;rsquo;re ever going to leak then you can just create a &lt;a href="https://en.wikipedia.org/wiki/Tar_%28computing%29">Tar&lt;/a> archive encrypted with &lt;a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard">GnuPG&lt;/a>. &lt;a href="https://secushare.org/PGP">GnuPG is awful&lt;/a> so you might consider other file encryption methods as well. It doesn&amp;rsquo;t matter that much so long as you use free software.&lt;/p>
&lt;h4 id="content-distribution">Content Distribution&lt;/h4>
&lt;p>Once your encrypted archive is prepared you&amp;rsquo;ll need to distribute it to others. Wikileaks &amp;ldquo;insurance&amp;rdquo; files were distributed through torrents. In Mr. Robot email was used. There&amp;rsquo;s no standard for this. It&amp;rsquo;s completely up to you how you do this part. The important part is anyone that would want a copy knows about the leak and can get a copy.&lt;/p>
&lt;h4 id="vps-setup">VPS Setup&lt;/h4>
&lt;p>Now comes the part of the setup where you need a server machine to actually trigger the DMS. &lt;strong>If you&amp;rsquo;re using a DMS there&amp;rsquo;s no reason not to make it as secure as possible&lt;/strong> because securing it from a state-level adversary is only a few steps extra versus securing it from a mobster. I won&amp;rsquo;t cover how to secure your personal computer but if you&amp;rsquo;re using a DMS you should at a minimum have &lt;a href="https://en.wikipedia.org/wiki/Full_disk_encryption">full-disk encryption&lt;/a> enabled with a strong password.&lt;/p>
&lt;p>To get started use an anonymous VPS since you shouldn&amp;rsquo;t have physical access to the server. If you have physical access an adversary could also gain physical access and permanently disarm the switch. So the first thing you need to do is acquire &lt;a href="https://www.monero.how/">Monero&lt;/a>. Then use Tor Browser to &lt;a href="https://www.getmonero.org/community/merchants/#hosting">purchase a &lt;em>foreign&lt;/em> VPS&lt;/a> with the Monero, but don&amp;rsquo;t give the VPS provider your true credentials. You can ssh into your VPS with the command &lt;code>torify ssh &amp;lt;user&amp;gt;@&amp;lt;server&amp;gt;&lt;/code>. Then you should &lt;a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">harden your ssh configuration&lt;/a> and &lt;a href="https://medium.com/@NullByteWht/how-to-set-up-an-ssh-server-with-tor-to-hide-it-from-shodan-hackers-eda93927a742">put sshd behind a Tor v3 Hidden Service&lt;/a> so a &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle">MITM&lt;/a> can&amp;rsquo;t locate it. Once all that&amp;rsquo;s done you&amp;rsquo;re finally ready to set up the actual DMS.&lt;/p>
&lt;h4 id="cron">Cron&lt;/h4>
&lt;p>There is free software that automatically configures a DMS, but it&amp;rsquo;s equally as easy to set one up yourself. Simply write a script that checks for the existence of a file and schedule it to run at regular intervals using &lt;a href="https://en.wikipedia.org/wiki/Cron">Cron&lt;/a>. If the file exists, delete it. If the file does not exist, your script should execute a separate script that publishes the passphrase or private key needed to decrypt the data. It&amp;rsquo;s up to you &lt;em>where&lt;/em> you publish the decryption key. Just be sure to test it first with a &lt;em>fake&lt;/em> key.&lt;/p>
&lt;p>Here&amp;rsquo;s what such a script might look like:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># File: /home/&amp;lt;user&amp;gt;/trigger.sh&lt;/span>
FILE_DISARMED&lt;span style="color:#f92672">=&lt;/span>/home/&amp;lt;user&amp;gt;/disarmed
LEAK_SCRIPT&lt;span style="color:#f92672">=&lt;/span>/home/&amp;lt;user&amp;gt;/leak.sh
&lt;span style="color:#66d9ef">if&lt;/span> test -f $FILE_DISARMED&lt;span style="color:#e6db74">&amp;#34;; then
&lt;/span>&lt;span style="color:#e6db74"> rm &lt;/span>$FILE_DISARMED&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">else
&lt;/span>&lt;span style="color:#e6db74"> ./LEAK_SCRIPT # publishes private key etc.
&lt;/span>&lt;span style="color:#e6db74">fi
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The script for disarming the switch might look like:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># File: /usr/local/bin/disarm.sh&lt;/span>
FILE_DISARMED&lt;span style="color:#f92672">=&lt;/span>/home/&amp;lt;user&amp;gt;/disarmed
GREEN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\033[0;32m&amp;#39;&lt;/span>
CYAN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\033[0;36m&amp;#39;&lt;/span>
NC&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\033[0m&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> test -f $FILE_DISARMED; &lt;span style="color:#66d9ef">then&lt;/span>
printf &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>CYAN&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">ALREADY DISARMED.&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
touch $FILE_DISARMED
printf &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>GREEN&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">SUCCESSFULLY DISARMED.&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Those two scripts are the most important. Don&amp;rsquo;t forget to set their permissions as executable. Next you need to decide how often you want the switch to be triggered. You can set it to be as frequent as you wish but remember if the switch isn&amp;rsquo;t deactivated each time before trigger.sh runs it will publish the private key. The last thing you want is to accidentally trigger the switch. Phoenixnap.com has a great &lt;a href="https://phoenixnap.com/kb/set-up-cron-job-linux">knowledgebase article&lt;/a> on using Cron. Here&amp;rsquo;s an example that triggers the switch monthly at 00:00 hrs:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-plaintext" data-lang="plaintext">@monthly /home/&amp;lt;user&amp;gt;/trigger.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally the client command to disarm the switch is:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">torify ssh &amp;lt;user&amp;gt;@&amp;lt;address.onion&amp;gt; disarm.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="reminder">Reminder&lt;/h4>
&lt;p>As an added bonus you could use Cron to schedule a script notifying you before the DMS is triggered. For instance if the DMS needs disarmed on a monthly basis you could write a script that emails you a week in advance a reminder to deactivate it. Again a DMS is &lt;em>only&lt;/em> effective if you &lt;em>don&amp;rsquo;t forget to disarm it&lt;/em>, so I wouldn&amp;rsquo;t create a DMS without a notification script.&lt;/p>
&lt;p>That&amp;rsquo;s it. That&amp;rsquo;s all you need to set up your own DMS.&lt;/p>
&lt;h2 id="popularity">Popularity&lt;/h2>
&lt;p>You don&amp;rsquo;t hear about Wikileaks/Mr. Robot style DMS&amp;rsquo;s being used very often. I assume that&amp;rsquo;s because of 3 reasons:&lt;/p>
&lt;ol>
&lt;li>They require knowledge of GNU/Linux, encryption tools and scripting&lt;/li>
&lt;li>They require continuous maintenance&lt;/li>
&lt;li>They don&amp;rsquo;t occur to most people to use&lt;/li>
&lt;/ol>
&lt;p>In my view &lt;strong>DMS&amp;rsquo;s are woefully underused and they should be more common especially with dissidents, protest organizers and investigative journalism organizations&lt;/strong>. The fact that Jeffrey Epstein didn&amp;rsquo;t have a DMS before he &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Epstein_didn%27t_kill_himself">killed himself&lt;/a>&amp;rdquo; is almost beyond believe. A man with his wealth and criminal connections should&amp;rsquo;ve had one. He could&amp;rsquo;ve privately paid someone to set it up &lt;em>for&lt;/em> him.&lt;/p>
&lt;p>I think about how his situation might have turned out differently if he would&amp;rsquo;ve set up one. Assuming he didn&amp;rsquo;t commit suicide it could have protected him long enough to call out other rich and powerful people involved in sex trafficking. But it goes farther than Epstein. There are lots of situations where wealthy individuals and those with computer skills could have set up a DMS to protect themselves but apparently didn&amp;rsquo;t think to do so.&lt;/p>
&lt;p>As I said before &lt;a href="#Theory_and_Practice">one should be careful before using a DMS&lt;/a>. Using one is tricky in practice but it still seems like they could get far more use than they tend to. I&amp;rsquo;m generally in favor of them since they seem to be primarily used for preventing violence and protecting socially important leaks. Like any tool they can be misused for nefarious purposes. Based on present usage though, if they were used &lt;em>more often&lt;/em> in the future, I estimate that, on balance, they would be ethically and socially beneficial.&lt;/p></description></item><item><title>[Article] You Should Be Using an Old Computer</title><link>https://0gitnick.xyz/article-you-should-be-using-an-old-computer/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/article-you-should-be-using-an-old-computer/</guid><description>&lt;p>I was going to write my own post about this subject until I discovered Luke Smith, a GNU/Linux technology Youtuber, already wrote an article about it.&lt;/p>
&lt;p>[Link Below]&lt;br>
&lt;a href="https://lukesmith.xyz/articles/oldcomputer">https://lukesmith.xyz/articles/oldcomputer&lt;/a>&lt;/p>
&lt;p>His reasons for recommending an old computer (specifically Thinkpads) are:&lt;/p>
&lt;ul>
&lt;li>New computers are unnecessary for most people&lt;/li>
&lt;li>New computers are expensive&lt;/li>
&lt;li>New computers are slim and break easier&lt;/li>
&lt;li>New computers are impractical to repair yourself&lt;/li>
&lt;li>New computers contain a potential backdoor&lt;/li>
&lt;/ul>
&lt;p>You can read his article for more details on each point. I have a few comments to make. Smith cites processor-intensive video rendering as a reason you might need a newer computer. There&amp;rsquo;s also training/running neural networks, mining digital currency and some exhaustive search algorithms. But again the average person won&amp;rsquo;t be doing those things.&lt;/p>
&lt;h2 id="intel-management-engine">Intel Management Engine&lt;/h2>
&lt;p>Smith also claims the Intel Management Engine (Intel ME), the hidden processor in every modern Intel chip, is a government backdoor. This isn&amp;rsquo;t yet proven but the code in Intel ME is proprietary and secret, so it should be treated as a &lt;em>potential&lt;/em> intentional backdoor. &lt;em>At minimum&lt;/em> it&amp;rsquo;s a &lt;a href="https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it">security hazard&lt;/a>. Smith notes that AMD processors have basically the same problem.&lt;/p>
&lt;p>The potential backdoor is really the crux of the ethical problem. Even if you don&amp;rsquo;t care about the price and you never drop your computer and you never replace any parts there&amp;rsquo;s still the potential backdoor. &lt;strong>Intel ME is always on even when your computer is turned off. It can&amp;rsquo;t be removed. No one knows what it actually does and Intel won&amp;rsquo;t tell us. We know it has full control over system memory and it can connect to the internet.&lt;/strong> If you&amp;rsquo;re at all tempted to use the &lt;a href="https://rationalwiki.org/wiki/Nothing_to_hide">nothing to hide argument&lt;/a> I only ask that you apply that same logic to Intel. If Intel has nothing to hide, why can&amp;rsquo;t they show us the source code for the ME? Why keep it secret? Why not allay all fears of a backdoor once and for all by releasing the source code? Unless of course it is in fact a backdoor.&lt;/p>
&lt;p>Maybe you&amp;rsquo;re above nothing to hide though. You understand privacy is a human right. But, you reason, the Intel ME isn&amp;rsquo;t a big deal because an interested government could find out what they wanted to know some other way. Besides even without ME there&amp;rsquo;s other embedded software that, however unlikely it is, could possibly also have backdoors. All that&amp;rsquo;s beyond your &amp;ldquo;threat model&amp;rdquo; anyway. This goes back to a previous post I made. By using the &lt;em>least&lt;/em> potentially backdoored computer possible, you &lt;a href="../../raising-the-bar-on-privacy">raise the bar on privacy&lt;/a> (and freedom!). That&amp;rsquo;s a cause we &lt;em>all&lt;/em> need to be fighting for irrespective of threat models.&lt;/p>
&lt;h2 id="retrofreedom">RetroFreedom&lt;/h2>
&lt;p>The next most obvious question is &amp;ldquo;Where do I buy a computer without a backdoor?&amp;rdquo;. I recommend &lt;a href="https://retrofreedom.com/">RetroFreedom&lt;/a> (formerly Minifree). &lt;a href="https://vimuser.org/">Leah Rowe&lt;/a> operates the site. She maintains the &lt;a href="https://libreboot.org/">Libreboot&lt;/a> project, a free as in freedom alternative BIOS that ships with the old Thinkpads she sells. You can purchase products with cryptocurrency and several addons and upgrades are offered. I don&amp;rsquo;t mind the markup in price since I know it goes toward an important free software project. I can personally attest to the quality of the laptops from RetroFreedom. I&amp;rsquo;ve bought several laptops from there running exclusively free software and I&amp;rsquo;m very satisfied.&lt;/p>
&lt;h2 id="free-software">Free Software&lt;/h2>
&lt;p>I would never again use a nonfree laptop to do my everyday personal computing. I&amp;rsquo;ve given up videogames since all the popular titles are nonfree requiring me to run the Winblows operating system. &lt;a href="../../why-i-left-its">I quit my job&lt;/a> to avoid promoting proprietary software. &lt;a href="../../the-tipping-point-rejecting-windows-zoom-lockdown-browser-and-the-lockdown-monitor">I dropped out of college&lt;/a> so I didn&amp;rsquo;t have to use invasive proprietary malware. Too many people have told me I&amp;rsquo;m too extreme. I care too much about free software. Life is just too short to be so picky. But to them I would say this:&lt;/p>
&lt;p>What does it say about society that the only way to get a non-backdoored laptop is to buy from a specific set of computers that are around 13 years old, replace the WiFi card, use special equipment to flash the BIOS with Libreboot/Coreboot and replace the operating system with GNU/Linux? Or pay someone else to do the procedure.&lt;/p>
&lt;p>Further, what you have to realize is there is a war being waged on general-purpose computing. Every year manufacturers come up with new ways to make your computer harder to repair thereby increasing e-waste. Every year software companies make their ecosystems more locked down giving you less and less control over your own devices. To &lt;em>not&lt;/em> use an old Thinkpad is to be on the wrong side of this war. &lt;strong>I do not want to live in a world where I don&amp;rsquo;t have control over what I buy and cannot repair it&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Most people living in 1st world countries today are far too complacent&lt;/strong>. I can&amp;rsquo;t emphasize this enough. So when people ask me why I care so much, why I&amp;rsquo;ve given up &lt;em>so&lt;/em> much, I look at them in bewilderment. Why &lt;em>don&amp;rsquo;t&lt;/em> they? If people like them don&amp;rsquo;t start caring soon we&amp;rsquo;re going to live in a dark world where computer users are totally subjugated. The 13 year old Thinkpads suffice for 95% of use cases for now but that won&amp;rsquo;t always be true. Proprietary threats are looming. Change needs to happen now, not 10 years from now. So use a free laptop even if it&amp;rsquo;s inconvenient because it&amp;rsquo;s not getting any easier.&lt;/p>
&lt;h2 id="privacy">Privacy&lt;/h2>
&lt;p>There&amp;rsquo;s also the whole privacy issue of having a potentially backdoored laptop. A college professor once told me privacy is dead. As if it were just a fact of the modern era and I hadn&amp;rsquo;t realized it yet. As long as there are people like me are around privacy is &lt;em>not&lt;/em> dead. I will &lt;em>never&lt;/em> accept a world without privacy. I will resist backdoors into my computer. I&amp;rsquo;ll tell you another thing. It wasn&amp;rsquo;t all the free software people that inspired this in me. It was the haters. Those who said it didn&amp;rsquo;t matter, privacy is dead, it&amp;rsquo;s unwinnable, I should just give up so my life is easier, etc. So please tell me any of those things. The naysayers keep me motivated. I don&amp;rsquo;t waste my time wondering whether free software is a fight we can win. It&amp;rsquo;s a fight we &lt;em>must&lt;/em> win. As long as there&amp;rsquo;s &lt;em>any&lt;/em> chance of winning, and even if it &lt;em>seems like&lt;/em> there&amp;rsquo;s not, we &lt;em>must&lt;/em> try.&lt;/p>
&lt;p>You don&amp;rsquo;t need to quit your job and drop out to create change. All you have to do is create a rift. Get people to take notice. Force them to act by being unmoving in your commitment to free software. You won&amp;rsquo;t be popular. And you&amp;rsquo;ll be told you&amp;rsquo;re wrong &lt;em>a lot&lt;/em>. You might even start to doubt yourself. But let others say whatever they want and stay strong anyway. You have an advantage they don&amp;rsquo;t: the knowledge that you&amp;rsquo;re doing the right thing. You do have power. Those in power would like you to think that you don&amp;rsquo;t, but you do. Wield it wisely.&lt;/p></description></item><item><title>Consumer Data Protection is a Distraction</title><link>https://0gitnick.xyz/consumer-data-protection-is-a-distraction/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/consumer-data-protection-is-a-distraction/</guid><description>&lt;p>This post is a public service announcement.&lt;/p>
&lt;h2 id="why-businesses-collect-data">Why Businesses Collect Data&lt;/h2>
&lt;p>Businesses collect data from consumers for a variety of reasons. Data is collected to provide better customer service, provide a personalized customer experience, refine marketing strategy, derive other data, suggest new products, make predictions, recommendations and determine optimal business decisions. But as internationally renowned security technologist and author Bruce Schneier points out, &lt;a href="https://www.schneier.com/blog/archives/2016/03/data_is_a_toxic.html">data is a toxic asset&lt;/a>.&lt;/p>
&lt;h2 id="why-its-dangerous">Why it&amp;rsquo;s Dangerous&lt;/h2>
&lt;p>I recommend reading his &lt;a href="https://www.schneier.com/blog/archives/2016/03/data_is_a_toxic.html">full blog post&lt;/a>. But from just a consumer perspective, giving companies your data is dangerous for several reasons according to Schneier:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Saving it is dangerous because many people want it. Of course companies want it; that’s why they collect it in the first place. But governments want it, too. In the United States, the National Security Agency and FBI use secret deals, coercion, threats and legal compulsion to get at the data. Foreign governments just come in and steal it. When a company with personal data goes bankrupt, it’s one of the assets that gets sold.&lt;/p>
&lt;p>Saving it is dangerous because it’s hard for companies to secure. For a lot of reasons, computer and network security is very difficult. Attackers have an inherent advantage over defenders, and a sufficiently skilled, funded and motivated attacker will always get in.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>That last part is important. &amp;ldquo;&amp;hellip;a sufficiently skilled, funded and motivated attacker will always get in&amp;rdquo;. The problem is you cannot trust corporations to keep your data safe. There aren&amp;rsquo;t exceptions to this that come to mind. Even if we suppose the data is encrypted on the server and only you control the encryption key, that&amp;rsquo;s not the case of a corporation being trustworthy to hold your data. &lt;em>They couldn&amp;rsquo;t leak it if they wanted to&lt;/em>. That&amp;rsquo;s what&amp;rsquo;s called &lt;em>trustless&lt;/em> design. The system is set up so you don&amp;rsquo;t have to trust whoever you&amp;rsquo;re doing business with. The best of systems are set up that way. It&amp;rsquo;s good for the consumer and it minimizes risk for the business.&lt;/p>
&lt;p>The central reason you can&amp;rsquo;t trust businesses to keep your data safe is you don&amp;rsquo;t know how it&amp;rsquo;s being handled once it&amp;rsquo;s out of your hands. Even if the business &lt;em>claims&lt;/em> to have reasonable data protection, how can you possibly know that for sure? All it takes is 1 incompetent or malicious employee for your data to be leaked. All it takes is 1 out of date software package or 1 software vulnerability. All it takes is 1 government to steal from or coerce the business for the data. And if there&amp;rsquo;s ever a merger or acquisition then some other business acquires your data as an asset by default.&lt;/p>
&lt;p>And let&amp;rsquo;s not forget data is combined with other data by data brokers to derive things about you that you didn&amp;rsquo;t explicitly share. You might think that 5 minute Youtube video of yourself doesn&amp;rsquo;t reveal too much but &lt;a href="https://github.com/daviddao/awful-ai">disturbing uses of AI&lt;/a> can be applied to it to derive information that you didn&amp;rsquo;t intend to include. And AI will only get better over time. You can&amp;rsquo;t predict the capabilities future AI will have to derive new information from your data. Even if it&amp;rsquo;s just &lt;a href="https://en.wikipedia.org/wiki/Metadata">metadata&lt;/a>, remember the former CIA and NSA director Michael Hayden&amp;rsquo;s statement concerning NSA bulk surveillance: &amp;ldquo;We kill people based on metadata&amp;rdquo;. &lt;strong>Put simply, consumer data protection is, has always been, and will be for the foreseeable future, a house of cards&lt;/strong>.&lt;/p>
&lt;h2 id="how-to-protect-yourself">How to Protect Yourself&lt;/h2>
&lt;p>The only foolproof way to protect yourself from data leaks is to &lt;strong>never give data to businesses in the first place&lt;/strong>. &amp;ldquo;Consumer data protection&amp;rdquo; is a distraction campaign. You see, the more businesses talk about &amp;ldquo;consumer data protection&amp;rdquo; the less &amp;ldquo;bandwidth&amp;rdquo; there is in public discourse to talk about &lt;em>outright refusal&lt;/em> to give up your data. Businesses can tout their data security practices all they want but it distracts from the truth which is you can just choose not to give your data to companies. We now live in a culture of &amp;ldquo;I agree&amp;rdquo; to the point that people forget they can say no to these things. Don&amp;rsquo;t consent. Don&amp;rsquo;t click &amp;ldquo;I agree&amp;rdquo; unless you&amp;rsquo;ve actually read the terms. Don&amp;rsquo;t provide identifying information without serious consideration.&lt;/p>
&lt;p>And for those of you who say &amp;ldquo;I have to give &lt;a href="https://www.urbandictionary.com/define.php?term=Goolag">Goolag&lt;/a> my data! Rearranging my life to protect my data would be too hard! I need a Goolag account for my job or university or whatever the case may be.&amp;rdquo; I leave you with a quote from the Roman stoic Seneca:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;It&amp;rsquo;s not that we don&amp;rsquo;t dare do things because they are difficult; rather, they are difficult because we don&amp;rsquo;t dare&amp;rdquo; &amp;ndash; Seneca&lt;/p>
&lt;/blockquote></description></item><item><title>[Video] Fixing Social Media for Good</title><link>https://0gitnick.xyz/video-fixing-social-media-for-good/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/video-fixing-social-media-for-good/</guid><description>&lt;p>Recent events have brought the issue of social media censorship to the forefront:&lt;/p>
&lt;ul>
&lt;li>Facebook bans Trump&amp;rsquo;s account&lt;/li>
&lt;li>Instagram bans Trump&amp;rsquo;s account&lt;/li>
&lt;li>Snapchat bans Trump&amp;rsquo;s account&lt;/li>
&lt;li>Twitch bans Trump&amp;rsquo;s account&lt;/li>
&lt;li>Twitter bans Trump&amp;rsquo;s account&lt;/li>
&lt;li>Amazon removes Parler from its cloud hosting service&lt;/li>
&lt;li>Apple removes Parler from the App Store&lt;/li>
&lt;li>Google removes Parler from the Play Store&lt;/li>
&lt;li>Discord bans TheDonald.win server&lt;/li>
&lt;li>Reddit bans r/DonaldTrump&lt;/li>
&lt;li>Pinterest censors Trump related topics&lt;/li>
&lt;li>Shopify removes Trump&amp;rsquo;s merchandise from its platform&lt;/li>
&lt;li>TikTok removes Trump&amp;rsquo;s speeches&lt;/li>
&lt;li>Youtube removes videos claiming widespread voter fraud&lt;/li>
&lt;/ul>
&lt;p>No informed person is disputing that these are private companies and they have the &lt;em>legal&lt;/em> right to do whatever they want (within the bounds of the law) with their platforms. The 1st amendment &lt;em>doesn&amp;rsquo;t&lt;/em> apply here. Nonetheless it&amp;rsquo;s very alarming that voices coming from the political left are sympathetic to &lt;em>widespread&lt;/em> censorship just because it&amp;rsquo;s Trump. If it were someone within their own ranks being censored they would no doubt be making the same argument I&amp;rsquo;m going to make about the danger of censorship. Voices coming from the political right actually have a saner viewpoint on the censorship problem in the sense that they can actually recognize censorship as a social problem which Trump&amp;rsquo;s situation has only highlighted.&lt;/p>
&lt;p>As amusing as it is seeing adult Eric Cartman&amp;rsquo;s megaphone taken away, having a handful of big tech companies control who gets a voice and who doesn&amp;rsquo;t is extremely dangerous. Once a platform is large enough it is a &lt;em>de facto&lt;/em> public forum in the sense that it can be used by anyone to freely spread their ideas. Censorship on it in practice can be as damaging to freedom of speech as censoring a &lt;em>de jure&lt;/em> public forum. The good coming from this censorship is people are waking up to the fact that big tech companies can and do censor whoever they want when it suits them. &lt;a href="https://signal.org">Signal Messenger&lt;/a> has even seen a &lt;a href="https://nitter.snopyta.org/elonmusk/status/1347165127036977153">huge increase&lt;/a> in downloads since the censorship imposed after the capitol riots. Uncensorable platforms are needed. &lt;a href="https://redirect.invidious.io/channel/UC2eYFnH61tmytImy1mTYvhA">Luke Smith&lt;/a> proposes &lt;a href="https://en.wikipedia.org/wiki/Federation_%28information_technology%29">federated&lt;/a> platforms as a permanent fix for the censorship issue:&lt;/p>
&lt;p>&lt;a href="https://videos.lukesmith.xyz/videos/watch/0c256439-ec59-4e41-bd40-0ebeca751543?autoplay=1">[Video Link]&lt;/a>&lt;/p>
&lt;h2 id="federation-versus-peer-to-peer">Federation Versus Peer to Peer&lt;/h2>
&lt;p>While federation is better than centralization, in practice federation tends toward centralization anyway. Email is federated but a few big providers (Gmail, Yahoo, Outlook, iCloud, Protonmail) control the market. Worse yet, all the big providers sell user data. But it&amp;rsquo;s not just email. On the federated communication platform &lt;a href="https://www.matrix.org">Matrix&lt;/a> users are still heavily concentrated on the default matrix.org homeserver. So it&amp;rsquo;s not true that federation alone fixes social media for good. A &lt;a href="https://en.wikipedia.org/wiki/Peer-to-peer">peer-to-peer&lt;/a> social media platform could fix social media for good. But I&amp;rsquo;d still rather see everyone on &lt;a href="https://en.wikipedia.org/wiki/Fediverse#Communication_protocols_used_in_the_fediverse">The Fediverse&lt;/a> instead of the centralized social media platforms used today.&lt;/p></description></item><item><title>[Video] TikTok - a Trojan Horse into China's Dystopia</title><link>https://0gitnick.xyz/video-tiktok-a-trojan-horse-into-chinas-dystopia/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/video-tiktok-a-trojan-horse-into-chinas-dystopia/</guid><description>&lt;p>TikTok is a national security risk and yet people are still using it &lt;em>by the millions&lt;/em>. President Trump signed an &lt;a href="https://www.whitehouse.gov/presidential-actions/executive-order-addressing-threat-posed-tiktok/">executive order&lt;/a> to ban TikTok by prohibiting United States citizens from doing business with the Chinese company ByteDance that owns TikTok. However the restrictions have been stalled in court since last August. At the time of the &lt;a href="https://newsroom.tiktok.com/en-us/tiktok-files-lawsuit">TikTok lawsuit&lt;/a> ByteDance claimed they had &lt;strong>100 million active users in the United States&lt;/strong>.&lt;/p>
&lt;p>The main concern in the executive order seems to be TikTok allows the CCP to collect Americans' personal information including federal employees and it can be used for disinformation and blackmail. But as &lt;a href="https://redirect.invidious.io/channel/UCjr2bPAyPV7t35MvcgT3W8Q">TheHatedOne&lt;/a> points out, US-based social media platforms already do the same thing. Facecrook has collected personal user data &lt;em>way&lt;/em> before TikTok was around and it has more than twice as many users today as TikTok did in August. A consequence of Facecrook&amp;rsquo;s data collection is it enabled &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal">Cambridge analytica&lt;/a> to manipulate the US presidential election in 2016 and yet the Federal Trade Commission only fined Bookface $5 billion dollars. Bookface made $15 billion in just the first quarter of 2019. The fine was &lt;em>barely&lt;/em> a slap on the wrist.&lt;/p>
&lt;p>The moral is if you&amp;rsquo;re a US-based company that endangers national security through personal data collection and manipulation of public opinion through propoganda you get a slap on the wrist from the FTC while the NSA pats you on the back. If you&amp;rsquo;re a Chinese-based company doing more or less the same you get an executive order banning you from doing business in the United States. And the 2 core issues of &lt;strong>centralization of power&lt;/strong> and &lt;strong>proprietary software&lt;/strong> of which the other issues are a symptom never even get so much as a mention in the mainstream media or the government.&lt;/p>
&lt;p>I recommend TheHatedOne&amp;rsquo;s commentary on TikTok because he actually addresses the proprietariness and centralization of power in the case of TikTok. Have a listen.&lt;/p>
&lt;p>&lt;a href="https://redirect.invidious.io/watch?v=5UooWpC4yJs&amp;amp;dark_mode=true&amp;amp;autoplay=1">[Video Link]&lt;/a>&lt;/p></description></item><item><title>On Blockchain</title><link>https://0gitnick.xyz/on-blockchain/</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/on-blockchain/</guid><description>&lt;p>Blockchain is a topic I&amp;rsquo;ve had thoughts on for a while now. I just never got around to writing about it. There&amp;rsquo;s no shortage of wild, baseless assertions in the &amp;ldquo;crypto space&amp;rdquo; about the future of blockchain. I want to clear the air by speaking sensibly about blockchain. In accordance with my theme of not assuming prior knowledge, check out the video below if you&amp;rsquo;re unfamiliar with blockchain.&lt;/p>
&lt;p>&lt;a href="https://redirect.invidious.io/watch?v=SSo_EIwHSd4&amp;amp;dark_mode=true&amp;amp;autoplay=1">[Video Link]&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;m going to talk about blockchain in the context of cryptocurrencies. Henceforth understand when I use the term &amp;ldquo;blockchain&amp;rdquo; I really mean blockchain as used in cryptocurrency. I know there are other potential use cases but I have to limit the scope of this post or it won&amp;rsquo;t end. Now while I have plenty of criticism for blockchain, first I have to give the devil his due.&lt;/p>
&lt;h2 id="blockchains-successes">Blockchain&amp;rsquo;s Successes&lt;/h2>
&lt;h4 id="cryptocurrency-markets">Cryptocurrency Markets&lt;/h4>
&lt;p>For starters the multi-billion dollar cryptocurrency market may not exist without blockchain. Even non-blockchain based cryptocurrencies reference the blockchain based Bitcoin in their whitepapers. While there &lt;em>are&lt;/em> functioning non-blockchain cryptocurrencies, they might never have been conceived without the initial inspiration from Bitcoin. Bitcoin is &lt;em>still&lt;/em> the most valuable coin and it &lt;em>still&lt;/em> uses blockchain. As I write this, it&amp;rsquo;s nearing an all-time high of $30k USD per 1 BTC.&lt;/p>
&lt;h4 id="smart-contracts">Smart Contracts&lt;/h4>
&lt;p>Shortly after Bitcoin &lt;a href="https://en.wikipedia.org/wiki/Vitalik_Buterin">Vitalik Buterin&lt;/a>&amp;rsquo;s blockchain based &lt;a href="https://ethereum.org">Ethereum&lt;/a> cryptocurrency hit the scene featuring &lt;a href="https://en.wikipedia.org/wiki/Smart_contract">smart contracts&lt;/a>. Smart contracts are programs that automatically run on top of a blockchain. They enable decentralized exchanges, &lt;a href="https://en.wikipedia.org/wiki/ERC20">ERC20&lt;/a> tokens, &lt;a href="https://en.wikipedia.org/wiki/CryptoKitties">CryptoKitties&lt;/a>, decentralized cloud storage payment, governance, and digital contracts. These use cases are only possible because of the security assurance blockchain provides.&lt;/p>
&lt;h4 id="darknet-markets">Darknet Markets&lt;/h4>
&lt;p>Since cryptocurrencies enable anonymous irreversible transactions with no middlemen, they are used on &lt;a href="https://en.wikipedia.org/wiki/Darknet_market">darknet markets&lt;/a> which otherwise wouldn&amp;rsquo;t exist. Some say darknet markets have done more to prevent drug-related violence than the DEA ever has. Those same markets also sell guns, stolen credit card details, and hackers for hire. It&amp;rsquo;s hard to say one way or the other if they are an overall force for good. But darknet markets are &lt;em>only&lt;/em> possible because of the anonymity of blockchain.&lt;/p>
&lt;p>Blockchain is a powerful, transformational technology still relevant twelve years after the &lt;a href="https://bitcoin.org/bitcoin.pdf">Bitcoin whitepaper&lt;/a> was originally published. Love it or hate it, there&amp;rsquo;s no denying its influence on cryptography, pop culture and finance.&lt;/p>
&lt;h2 id="blockchains-failures">Blockchain&amp;rsquo;s Failures&lt;/h2>
&lt;p>You&amp;rsquo;ll notice I still use blockchain to accept &lt;a href="../../about#donate">donations&lt;/a> for this website. That&amp;rsquo;s because I know of no better way to accept anonymous online donations. The moment I know of a better way I&amp;rsquo;ll update my donation methods. If &lt;a href="http://www.gnu.org/ghm/2020-january/taler.pdf">GNU Taler&lt;/a> ever gains popularity, I will use it instead. In any case, I&amp;rsquo;ve given the devil his due, so now I&amp;rsquo;ll move on to the problems with blockchain. And blockchain &lt;em>is&lt;/em> fraught with problems.&lt;/p>
&lt;h4 id="blockchain-doesnt-scale">Blockchain Doesn&amp;rsquo;t Scale&lt;/h4>
&lt;p>Blockchain&amp;rsquo;s biggest problem can be summed up in one word: scalability. To make sense of blockchain&amp;rsquo;s scalability problem, &lt;a href="https://en.wikipedia.org/wiki/CAP_theorem">CAP theorem&lt;/a> is a great place to start.&lt;/p>
&lt;h5 id="cap-theorem">CAP Theorem&lt;/h5>
&lt;p>CAP theorem says you can have no more than 2 out of the 3 qualities in a &lt;strong>distributed data store&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>Consistency&lt;/li>
&lt;li>Availability&lt;/li>
&lt;li>Partitioning&lt;/li>
&lt;/ol>
&lt;p>In any distributed system, partitioning is a given. Blockchain &lt;em>must&lt;/em> tolerate arbitrary dropped or delayed messages in the network. Partitioning and network failures are just the reality of computer networks. The only choice left is between consistency and availability.&lt;/p>
&lt;p>Consistency can&amp;rsquo;t be sacrificed either. Nodes must agree on which blocks are included in the blockchain otherwise you don&amp;rsquo;t have a blockchain. But that means the blockchain is sometimes unavailable. That&amp;rsquo;s a big problem because if you&amp;rsquo;re trying to perform a transaction, you can&amp;rsquo;t have the client program telling you to come back later. No one would use that cryptocurrency.&lt;/p>
&lt;p>To resolve this, &lt;strong>blockchain makes a tradeoff between consistency and availability&lt;/strong>. Blockchain is &lt;em>eventually consistent&lt;/em>. As the blockchain grows, nodes are guaranteed to &lt;em>eventually&lt;/em> agree on new blocks. In the Bitcoin blockchain large transactions are considered final after they reach 6 blocks deep in the chain. Transactions deeper than 6 blocks are &lt;em>consistent&lt;/em> across nodes.&lt;/p>
&lt;p>As for availability, nodes in the Bitcoin network have a mempool. A mempool or transaction pool is where transactions wait to be included in a block. Any given transaction will find its way into a block which will eventually become a finalized block so long as the Bitcoin network isn&amp;rsquo;t congested. The catch is Bitcoin can only perform about 3-7 transactions per second. Faster coins can handle tens or hundreds of transactions per second, but they all have some transaction limit due to the CAP theorem.&lt;/p>
&lt;p>None of this is to say that cryptocurrencies can&amp;rsquo;t scale. On the contrary &lt;strong>a scalable cryptocurrency with infinite transactions per second is inevitable as long as the crypto space continues advancing&lt;/strong>. All it says is blockchain (distributed data store) can&amp;rsquo;t scale up the way a cryptocurrency eventually must (infinite transactions per second). The logical conclusion is when an infinitely scalable cryptocurrency comes along it won&amp;rsquo;t be blockchain based, at least not if that blockchain is a distributed data store.&lt;/p>
&lt;h4 id="blockchain-is-slow">Blockchain is Slow&lt;/h4>
&lt;p>A problem that arises out of blockchain&amp;rsquo;s scalability problem is &lt;strong>blockchain is slow&lt;/strong>. It takes time to finalize transactions. If transaction volume is very high, it can take an &lt;em>indefinite&lt;/em> amount of time to finalize a transaction. It could be hours or days. Even the fastest blockchains are torturously slow given high enough transaction volume. If you&amp;rsquo;re buying goods at the supermarket that&amp;rsquo;s useless. The cashier isn&amp;rsquo;t going to stand there for 20 minutes waiting for your transaction to confirm. And they aren&amp;rsquo;t going to take the risk of letting you leave before it confirms since you could perform a &lt;a href="https://en.bitcoinwiki.org/wiki/Double-spending">double-spend&lt;/a> in the meantime. If you pay a high fee so your transaction confirms quickly, you just drive the fees up for everyone, making the currency unusable.&lt;/p>
&lt;p>I can hear blockchain enthusiasts objecting saying blockchain &lt;em>can&lt;/em> be fast because of &amp;ldquo;layer 2&amp;rdquo; solutions like the &lt;a href="https://en.wikipedia.org/wiki/Lightning_Network">Bitcoin lightning network&lt;/a>. A layer 2 solution means not all transactions need to be included in the blockchain. If 2 parties transact frequently, they can establish a &amp;ldquo;payment channel&amp;rdquo; on the blockchain, perform transactions with instant confirmation off-chain, then confirm the final amounts on-chain after the payment channel expires. Once you and your favorite coffee shop have a payment channel open speed is no longer an issue.&lt;/p>
&lt;p>My response to layer 2 solutions is that while they greatly &lt;em>improve&lt;/em> transaction speed, they doesn&amp;rsquo;t &lt;em>solve&lt;/em> the fundamental problem. Instead of being limited by transactions per second blockchain becomes limited by payment channels per second. You still can&amp;rsquo;t have infinite payment channels opened per second because that has to occur on-chain. In that case it&amp;rsquo;s not &lt;em>transactions&lt;/em> that are slow. It&amp;rsquo;s &lt;em>opening/closing transaction channels&lt;/em> that&amp;rsquo;s slow. Layer 2 solutions will never scale infinitely when layer 1 is still subject to the CAP theorem.&lt;/p>
&lt;h4 id="blockchain-price-is-volatile">Blockchain Price is Volatile&lt;/h4>
&lt;p>Another failure of blockchain that has nothing to do with scalability is price volatility. The price of Bitcoin for example changes dramatically. The market just can&amp;rsquo;t decide how much Bitcoin or any other blockchain is worth. This makes blockchain a bad &lt;a href="https://www.investopedia.com/terms/s/storeofvalue.asp">store of value&lt;/a>.&lt;/p>
&lt;p>There are several economic theories about what gives something value. Like fiat currency, blockchain isn&amp;rsquo;t backed by a commodity. It&amp;rsquo;s backed by a combination of confidence, expectation, practical utility, &lt;a href="https://wiki.mises.org/wiki/Regression_theorem">past value&lt;/a> and because geeks think it&amp;rsquo;s neat.&lt;/p>
&lt;p>&lt;em>Stablecoins&lt;/em> are the exception to blockchain volatility. They keep the value of the coin constant. They are backed either by &lt;em>other blockchains&lt;/em>, &lt;em>fiat currency reserves&lt;/em>, or some &lt;em>commodity&lt;/em> like gold bars. But all of these solutions are problematic.&lt;/p>
&lt;h5 id="other-blockchains">Other Blockchains&lt;/h5>
&lt;p>Backing blockchain with other blockchains is problematic since it pushes the problem of price volatility onto another cryptocurrency. It just passes the buck to someone else making for bad &lt;a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29">coupling&lt;/a>.&lt;/p>
&lt;h5 id="fiat-currencies">Fiat Currencies&lt;/h5>
&lt;p>Backing blockchain with fiat currency is also problematic because fiat-backed stablecoins are &lt;em>dependent&lt;/em> on their fiat counterparts which in turn depend on large financial institutions and governments, effectively linking the success of the cryptocurrency with the success of the fiat currency. For maximum decentralization of power and independence, cryptocurrencies shouldn&amp;rsquo;t be dependent on fiat in that way. It also passes the buck of price volatility to the fiat currency. This is bad because some fiat currencies have been even more volatile than Bitcoin!&lt;/p>
&lt;h5 id="physical-commodities">Physical Commodities&lt;/h5>
&lt;p>Backing blockchain with physical commodities is problematic for a few reasons. Someone has to hold the commodity. Who&amp;rsquo;s entrusted to do that and how is it decided? Furthermore, the reserves of the commodity have to be regularly audited for confidence in the value of the coin. The value can&amp;rsquo;t be trusted any more than the auditing process. The auditing process must be decentralized and setting up a &lt;em>decentralized&lt;/em> auditing process everyone can trust would be highly complex. It&amp;rsquo;s also &lt;em>terrible&lt;/em> coupling since the cryptocurrency is dependent on an external physical process carried out by people.&lt;/p>
&lt;h5 id="digital-commodities">Digital Commodities&lt;/h5>
&lt;p>Backing blockchain with &lt;em>digital commodities&lt;/em> (not other cryptocurrencies) seems viable. Digital commodities are things like &lt;em>processing power&lt;/em>, &lt;em>disk storage space&lt;/em> and maybe &lt;em>smart contracts&lt;/em>. The advantage digital commodities have over physical ones is they can be audited automatically in a decentralized manner by the network rather than by people. They don&amp;rsquo;t create unnecessary complexity or coupling. And they don&amp;rsquo;t pass the buck onto another currency.&lt;/p>
&lt;p>Therefore price volatility isn&amp;rsquo;t an inherent problem of blockchain since blockchain can be backed by digital commodities. Of course there are other reasons blockchain continues to be volatile pricewise besides lack of &amp;ldquo;inherent&amp;rdquo; value. But those are &lt;em>social&lt;/em> problems related to blockchain. They don&amp;rsquo;t necessarily have &lt;em>technical&lt;/em> solutions. For that reason I don&amp;rsquo;t consider price volatility an inherent problem of blockchain. It&amp;rsquo;s only a long-term problem for blockchains that don&amp;rsquo;t back their coin with a digital commodity, which just happens to be most of them right now.&lt;/p>
&lt;h4 id="blockchain-wastes-energy">Blockchain Wastes Energy&lt;/h4>
&lt;p>Now onto another problem with blockchain that isn&amp;rsquo;t an inherent problem but is serious enough to deserve a mention. &lt;em>Energy usage&lt;/em> is a problem for the subset of blockchains that are based on &lt;a href="https://en.wikipedia.org/wiki/Proof_of_work">proof of work&lt;/a>. Proof of work wastes tremendous amounts of energy. Whenever I bring this up, proponents of proof of work immediately counter by saying the work isn&amp;rsquo;t wasted because it&amp;rsquo;s used to secure the blockchain. But this argument is circular. The blockchain only needs to be secured by spending energy because that&amp;rsquo;s how it was set up. There are alternatives for securing blockchain that don&amp;rsquo;t require such massive energy consumption. One of those alternatives is &lt;a href="https://vitalik.ca/general/2020/11/06/pos2020.html">proof of stake&lt;/a>.&lt;/p>
&lt;p>Saying that proof of work doesn&amp;rsquo;t waste energy when proof of stake uses almost no energy in comparison and gets the same job done is like cutting your lawn with scissors one blade of grass at a time and saying it&amp;rsquo;s not a waste of time because it gets the grass cut meanwhile you have a working lawnmower in the garage. Given, proof of stake is &lt;em>newer&lt;/em> than proof of work so we didn&amp;rsquo;t always have a lawnmower. Scissors were the only option for a while. But it&amp;rsquo;s 2021, we &lt;em>do&lt;/em> have lawnmowers now and there&amp;rsquo;s no excuse to continue using scissors to cut the grass.&lt;/p>
&lt;h4 id="blockchain-isnt-private">Blockchain Isn&amp;rsquo;t Private&lt;/h4>
&lt;p>Every cryptocurrency that exists except &lt;a href="https://en.wikipedia.org/wiki/Monero_(cryptocurrency)">Monero&lt;/a> fails to provide users with privacy. The sender, receiver and amount transacted are all publicly visible to everyone. While there are no real names on the blockchain, online services link Bitcoin addresses with real people, deanonymizing Bitcoin. It also means Bitcoin isn&amp;rsquo;t fungible.&lt;/p>
&lt;p>Monero ensures that no one looking at the blockchain can see the sender, receiver or amount of a transaction by default. Monero still uses proof of work but there&amp;rsquo;s formally verified &lt;a href="https://eprint.iacr.org/2018/1105.pdf">research&lt;/a> from 2018 showing that there&amp;rsquo;s no contradiction with having both proof of stake and privacy. Privacy isn&amp;rsquo;t an inherent problem of blockchain. It&amp;rsquo;s just something most blockchains unfortunately aren&amp;rsquo;t implementing.&lt;/p>
&lt;h2 id="blockchains-inherent-problems">Blockchain&amp;rsquo;s Inherent Problems&lt;/h2>
&lt;p>The only problem &lt;em>inherent&lt;/em> to blockchain is scalability. Speed is related to scalability so it can be considered as the same problem. But it&amp;rsquo;s a fatal one. Blockchain cannot overcome its scalability problem. This is why blockchain is poorly suited for cryptocurrency. A new architecture is needed.&lt;/p>
&lt;h4 id="what-about-dags">What About DAGs?&lt;/h4>
&lt;p>Cryptocurrencies that use directed acyclic graphs (DAGS) like &lt;a href="https://www.iota.org/">Iota&lt;/a> and &lt;a href="https://nano.org">Nano&lt;/a> do not solve the scalability problems plaguing blockchain because DAGs also require every node to see every transaction. Therefore CAP theorem applies and the same scalability and speed problems arise.&lt;/p>
&lt;h4 id="what-about-x-data-structure">What About X Data Structure?&lt;/h4>
&lt;p>If it qualifies as a distributed data store (i.e. every node has to see every transaction) the CAP theorem applies and it can&amp;rsquo;t scale infinitely.&lt;/p>
&lt;h2 id="why-infinite-scalability-is-necessary">Why Infinite Scalability is Necessary&lt;/h2>
&lt;p>Some readers might think I&amp;rsquo;m making too big a deal of scalability. After all, there are cryptocurrencies that have layer 2 scaling solutions allowing thousands of transactions per second. Isn&amp;rsquo;t that good enough? Isn&amp;rsquo;t it committing the &lt;a href="https://yourlogicalfallacyis.com/black-or-white">black or white fallacy&lt;/a> to say that infinite scalability is necessary?&lt;/p>
&lt;p>No. &lt;em>Finite&lt;/em> scalability isn&amp;rsquo;t sufficient for a very simple reason. As I said before there will eventually be an &lt;em>infinitely&lt;/em> scalable cryptocurrency, a cryptocurrency capable of infinite transactions per second. And there&amp;rsquo;s no reason to think that infinite scalability is in contradiction with any of the other desirable properties of cryptocurrency. Perhaps in the short term cryptocurrency projects that don&amp;rsquo;t scale infinitely can compete with ones that do. They may &lt;em>temporarily&lt;/em> have some edge. For instance the first infinitely scalable cryptocurrency might not be as &lt;em>private&lt;/em> as Monero, so people will still use Monero. It might not support &lt;em>smart contracts&lt;/em> like Ethereum, so people will still use Ethereum. The price might not be as &lt;em>stable&lt;/em> as Tether, so people will still use Tether. But those are all problems that can eventually be solved. In the long term, cryptocurrencies that don&amp;rsquo;t scale, no matter how high their maximum &lt;a href="https://en.wikipedia.org/wiki/Transactions_per_second">TPS&lt;/a>, won&amp;rsquo;t be able to compete with ones that do scale infinitely.&lt;/p>
&lt;p>That&amp;rsquo;s why &lt;em>infinite&lt;/em> scalability is vital for the long-term success of a crypto project.&lt;/p>
&lt;h2 id="the-future-of-blockchain">The Future of Blockchain&lt;/h2>
&lt;p>For a blockchain to scale every node can&amp;rsquo;t see every transaction. Nor can every node see every open channel if you have layer 2 scaling. The moment you have not all nodes seeing all transactions you&amp;rsquo;re no longer talking about a blockchain. You may be talking about &lt;em>multiple independent&lt;/em> blockchains, but that&amp;rsquo;s not &lt;em>a&lt;/em> blockchain. In that sense blockchain can&amp;rsquo;t scale.&lt;/p>
&lt;p>If you combine my statement from the previous section that infinite scalability is vital for the long-term success of a crypto project and the fact that blockchain can&amp;rsquo;t scale, you get my answer to the question of &amp;ldquo;Does blockchain have a future in cryptocurrency?&amp;rdquo;. The answer is no. Blockchain has done well for the past decade and innovated and brought billions in investment into cryptocurrency which is all great, but it has no long-term future in cryptocurrency. I&amp;rsquo;ll generalize that and say globally synced data structures (distributed data stores) have no long-term future in cryptocurrency.&lt;/p>
&lt;p>That&amp;rsquo;s all I have to say about blockchain. Now I want to broaden the scope to cryptocurrency in general. So let&amp;rsquo;s talk about what the future of cryptocurrency might look like.&lt;/p>
&lt;h2 id="the-future-of-cryptocurrency">The Future of Cryptocurrency&lt;/h2>
&lt;p>The market isn&amp;rsquo;t going to be flooded with thousands of cryptocurrencies forever. Investors will &lt;em>eventually&lt;/em> realize that most cryptocurrency projects can&amp;rsquo;t deliver on their promises and they will pull their money out. The fate of around 90% of cryptocurrencies is failure. Eventually there has to be a &amp;ldquo;thinning out&amp;rdquo; of cryptocurrencies and a consolidation of effort among projects that are making the most progress. Given that reality, my advice to cryptocurrency developers is this:&lt;/p>
&lt;p>Developers in the crypto space need to reassess which projects are still worth investing time and effort into. While there are billions of dollars invested in the crypto space, interest is high and universities are teaching blockchain, it would be wise to focus research and development on the projects with the &lt;em>best&lt;/em> prospects for future success.&lt;/p>
&lt;p>For example, &lt;a href="https://www.monero.how/why-monero-vs-bitcoin">Monero is superior to Bitcoin&lt;/a>. It has &lt;a href="https://www.monero.how/how-does-monero-privacy-work">private transactions&lt;/a>. Bitcoin doesn&amp;rsquo;t. It has a &lt;a href="https://web.getmonero.org/resources/moneropedia/randomx.html">fairer proof of work algorithm&lt;/a>. It has a &lt;a href="https://www.getmonero.org/resources/moneropedia/tail-emission.html">tail emission&lt;/a> so miners will always be rewarded. Bitcoin doesn&amp;rsquo;t. Compared to more modern cryptocurrencies Bitcoin is pure garbage. Development effort in Bitcoin should therefore be redirected to Monero or for that matter any cryptocurrency with better prospects.&lt;/p>
&lt;p>You might say the same thing about Monero. It will never scale unless it abandons blockchain. That most likely will never happen. Shouldn&amp;rsquo;t research and development effort be redirected to a project that &lt;em>will&lt;/em> scale? And that&amp;rsquo;s a fair point. I think about it by dividing cryptocurrencies into the following categories:&lt;/p>
&lt;h4 id="next-gen-cryptocurrencies">Next-Gen Cryptocurrencies&lt;/h4>
&lt;p>The cryptocurrency projects &lt;em>most&lt;/em> worth investment, research and development are those with real prospects of infinite scalability since scalability has been &lt;em>the&lt;/em> issue for a decade now. The other desirable qualities for a cryptocurrency are easier to add later but scalability is something that has to be designed for &lt;em>from the beginning&lt;/em>. I&amp;rsquo;m not talking about temporary layer 2 scaling solutions that are only band-aids to the problem. Layer 2 solutions actually prove my point that in order to achieve &lt;em>infinite&lt;/em> scalability it can&amp;rsquo;t be an afterthought. Scalability has to be baked into the design from the very beginning. I would place &lt;a href="https://safenetwork.org">Safe Network&lt;/a> in this category.&lt;/p>
&lt;h4 id="useful-cryptocurrencies">Useful Cryptocurrencies&lt;/h4>
&lt;p>Then there are projects in use today that work well and are likely to continue to be useful in the short-term (a few years), but they don&amp;rsquo;t scale infinitely. They won&amp;rsquo;t be viable long term. Investing time and effort into them &lt;em>isn&amp;rsquo;t&lt;/em> a waste since they serve a useful purpose &lt;em>now&lt;/em>. &lt;a href="https://www.monero.how">Monero&lt;/a> is a perfect example. It offers privacy. &lt;a href="https://ethereum.org">Ethereum&lt;/a> offers smart contracts and proof of stake. &lt;a href="https://nano.org">Nano&lt;/a> offers feeless instant transactions and decent scalability.&lt;/p>
&lt;h4 id="outdated-cryptocurrencies">Outdated Cryptocurrencies&lt;/h4>
&lt;p>And then you have projects that have been important in the past, but should probably be abandoned now. They have &lt;em>no&lt;/em> unique properties that make them especially useful. They aren&amp;rsquo;t making any major innovations. It&amp;rsquo;s probably a waste of time to develop for them other than critical bug fixes. I&amp;rsquo;m looking at &lt;a href="https://bitcoin.org">Bitcoin&lt;/a>, &lt;a href="https://www.bitcoincash.org">Bitcoin Cash&lt;/a>, and &lt;a href="https://litecoin.com">Litecoin&lt;/a>.&lt;/p>
&lt;h4 id="vaporware">Vaporware&lt;/h4>
&lt;p>Finally there are the projects that are going &lt;em>absolutely&lt;/em> nowhere. They are held up by marketing and the illusion of progress through smoke and mirrors. They trick gullible investors and sometimes themselves into thinking they are the next big thing. When you look closely at their whitepaper and fundamentals it becomes clear their solutions don&amp;rsquo;t work in the real world. &lt;a href="https://www.iota.org">Iota&lt;/a> is in this category. It&amp;rsquo;s centralized, yet it has been promising decentralization for years with no way to get there. When evaluating these kinds of projects, remember Hanlon&amp;rsquo;s razor:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Never attribute to malice that which is adequately explained by stupidity.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="crypto-optimism">Crypto Optimism&lt;/h2>
&lt;p>After dishing out so much criticism of blockchain and the crypto space, I want to end on a positive note. I&amp;rsquo;m actually very optimistic about the crypto space. With so many different cryptocurrency projects, things can seem like a chaotic mess. But out of the ashes of a thousand failed projects and lost savings will rise a phoenix. That phoenix is the first decentralized, infinitely scalable, fast, value stable, energy efficient, private cryptocurrency. It might take a long time to get there, but the mere technical possibility has me confident we will see it come to fruition. It will accomplish what Bitcoin originally set out to do.&lt;/p>
&lt;p>Blockchain will be seen as a prototype, a stepping stone that kicked off something greater. There will be other &amp;ldquo;stepping stones&amp;rdquo; along the way. But scalability and the abandonment of globally synced data structures has to be the first. The other issues with cryptocurrency have only been solved in the context of globally synced data structures that don&amp;rsquo;t scale. Those solutions won&amp;rsquo;t necessarily translate over to a scalable context. When infinite scalability is finally achieved, we will hit the next milestone toward &lt;a href="https://en.wikipedia.org/wiki/Satoshi_Nakamoto">Satoshi Nakamoto&lt;/a>&amp;rsquo;s original vision of a decentralized, digital, free (as in freedom) financial system available to everyone but owned by no one.&lt;/p>
&lt;p>&lt;em>That&lt;/em> is something to get excited about.&lt;/p></description></item><item><title>IPv6 Adoption</title><link>https://0gitnick.xyz/ipv6-adoption/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/ipv6-adoption/</guid><description>&lt;p>I try to make my posts accessible in the sense that I don&amp;rsquo;t want to assume the reader has prior knowledge about a topic. So I&amp;rsquo;m going to explain a bit about IPv4 and IPv6 before I talk about how you can help with IPv6 adoption. If you&amp;rsquo;re already familiar with IPv4 and IPv6 feel free to &lt;a href="#IPv6_Adoption">skip&lt;/a>.&lt;/p>
&lt;h2 id="ipv4">IPv4&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/IPv4">IPv4&lt;/a> stands for Internet Protocol Version 4. I&amp;rsquo;m not going to get into the OSI model and computer networking layers. It&amp;rsquo;s enough to know that IPv4 is a protocol that defines how data is sent over the internet. IPv4 has a logical addressing system which allows packets to be routed from one computer to another. It&amp;rsquo;s how your computer and the computer hosting this website can talk to each another. IPv4 specifies 32 bits per address which is about 4.3 billion logical addresses.&lt;/p>
&lt;p>This was fine when the internet was small, but now the internet is massive and has more than 4.3 billion devices connected to it. This creates a problem since there are more devices than ways to address them. There are nuances like special addresses and addresses that are reserved but remain unused, but those aren&amp;rsquo;t that important for our purposes. The problem is how can we route traffic across the internet since we&amp;rsquo;ve run out of internet addresses to hand out?&lt;/p>
&lt;h4 id="nat">NAT&lt;/h4>
&lt;p>Welcome to &lt;a href="https://en.wikipedia.org/wiki/Network_address_translation">NAT&lt;/a>. NAT stands for Network Address Translation. The main reason NAT exists is to solve the IPv4 problem of not having enough logical addresses for every device. NAT translates private IP addresses on an internal network to public IP addresses that can talk to other computers on the real internet. This allows several connected devices to share the same IP address, conserving logical addresses so IPv4 can still work. I won&amp;rsquo;t go into detail on how this happens because it&amp;rsquo;s not relevant, but it does have overhead. NAT is basically an ugly hack for the problem of not enough IPv4 addresses for each internet connected device.&lt;/p>
&lt;h2 id="ipv6">IPv6&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/IPv6">IPv6&lt;/a> supercedes IPv4 using 128-bit addresses (340 undecillion IP addresses). It&amp;rsquo;s the obvious elegant solution to the problem of not having enough internet addresses: use a protocol that has more addresses. It doesn&amp;rsquo;t require NAT because each connected device can have its own IP address on the real public internet. Since the IPv6 address space is so huge, it&amp;rsquo;s highly unlikely that IPv6 will ever be superceded for lack of internet addresses.&lt;/p>
&lt;p>It also has other practical advantages to IPv4. As the name implies, it&amp;rsquo;s a newer protocol drafted in 1998 whereas IPv4 was first deployed in 1982. IPv6 packets are easier for routers to process since the IPv6 packet is simpler than the IPv4 packet. This is consistent with the original vision of the internet where most processing happens at endpoints, not routers. &lt;a href="https://en.wikipedia.org/wiki/IPsec">IPsec&lt;/a> is mandatory whereas in IPv4 it was retrofitted. Network operators don&amp;rsquo;t have to do port forwarding on the router or make firewall changes. Multicast addressing is simpler. IPv6 limits the size of &lt;a href="https://en.wikipedia.org/wiki/Routing_table">routing tables&lt;/a>. &lt;a href="https://en.wikipedia.org/wiki/Mobile_IPv6">Mobile IPv6&lt;/a> is as efficient as regular IPv6. I could go on but the point is it&amp;rsquo;s much better than IPv4 in every way.&lt;/p>
&lt;h2 id="ipv6-adoptiona-nameipv6_adoptiona">IPv6 Adoption&lt;a name="IPv6_Adoption">&lt;/a>&lt;/h2>
&lt;p>ISPs and tech giants are slowly increasing IPv6 support. Ideally, everyone would use IPv6 and IPv4 would cease to exist. IPv4 has no practical advantages. It was superceded by IPv6 over 2 decades ago and the switch still hasn&amp;rsquo;t completely happened yet. What&amp;rsquo;s the problem? If IPv6 is better then why is adoption taking so long? The barrier to IPv6 adoption isn&amp;rsquo;t so much at endpoints. By 2011 all major operating systems had support for IPv6. The problem is there often isn&amp;rsquo;t a strong financial incentive for IPv6 adoption.&lt;/p>
&lt;p>If you&amp;rsquo;re an average internet user, you don&amp;rsquo;t even know what IPv4 or IPv6 is. Unless your ISP enabled IPv6 for you then you probably don&amp;rsquo;t have it. You can access all the internet resources you want without it anyway. Even if your ISP enabled it and your modem/router supports it, still many end-user devices and applications don&amp;rsquo;t work well with it. If they do support IPv6, they also support IPv4 because IPv6 always runs alongside IPv4 with &lt;a href="https://en.wikipedia.org/wiki/Dual_Stack">dual stack&lt;/a>. If you host any internet resource then all your users support IPv4. So why bother with IPv6?&lt;/p>
&lt;h4 id="chicken-and-egg-problem">Chicken and Egg Problem&lt;/h4>
&lt;p>IPv6 is still a clearly technically superior protocol. But IPv6 adoption is a classic &lt;a href="https://en.wikipedia.org/wiki/Chicken_or_the_egg">chicken and egg&lt;/a> problem. End-users don&amp;rsquo;t adopt IPv6 because industry hasn&amp;rsquo;t, so there&amp;rsquo;s no practical advantages to it. Industry doesn&amp;rsquo;t adopt IPv6 because end-users haven&amp;rsquo;t, so there&amp;rsquo;s no money in it. The problem with IPv6 adoption is creating the social inertia without immediate economic benefit. The easiest way to do that for most people is to call up your ISP and ask them to help you enable IPv6 for your home network. If you find that some internet services don&amp;rsquo;t work with IPv6 then you can complain to those services about their IPv6 support. This creates social pressure from the end-user side to help speed up IPv6 adoption.&lt;/p>
&lt;p>Whether you&amp;rsquo;re a network administrator, provider of internet services or software developer, I encourage you to support IPv6 whether or not it will have any immediate benefit. You&amp;rsquo;ll be helping the internet take its next step. You are the other side of the coin when it comes to IPv6 adoption. It&amp;rsquo;s not a major selling point, but some users will appreciate it. We have to get over this chicken and egg problem of adoption. We can do that by going through a little extra trouble to help move the internet along. It has been 8 years since world IPv6 launch day and still the numbers for IPv6 adoption could be a lot higher than they are. Let&amp;rsquo;s make it happen.&lt;/p>
&lt;p>For updates on IPv6 adoption, check out the &lt;a href="https://www.worldipv6launch.org/blog/">World IPv6 Launch&lt;/a> site&amp;rsquo;s blog.&lt;/p></description></item><item><title>Social Media Alternatives</title><link>https://0gitnick.xyz/social-media-alternatives/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/social-media-alternatives/</guid><description>&lt;p>You don&amp;rsquo;t want to miss out on social media, but you also don&amp;rsquo;t want to deal with tracking scripts, ads and other nonsense that comes along with using proprietary walled garden platforms. Luckily there are publicly available privacy-respecting alternative front-ends for these popular social media sites:&lt;/p>
&lt;ul>
&lt;li>Instagram - &lt;a href="https://bibliogram.art/">Bibliogram&lt;/a> (&lt;a href="https://github.com/cloudrac3r/bibliogram">source&lt;/a>)&lt;/li>
&lt;li>Reddit - &lt;a href="https://teddit.net/">Teddit&lt;/a> (&lt;a href="https://codeberg.org/teddit/teddit">source&lt;/a>)&lt;/li>
&lt;li>Twitter - &lt;a href="https://nitter.net/">Nitter&lt;/a> (&lt;a href="https://github.com/zedeus/nitter">source&lt;/a>)&lt;/li>
&lt;li>Youtube - &lt;a href="https://invidio.us/">Invidious&lt;/a> (&lt;a href="https://github.com/iv-org/invidious">source&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>There is also an Android app in &lt;a href="https://www.f-droid.org">F-droid&lt;/a> called &lt;a href="https://www.f-droid.org/en/packages/app.fedilab.nitterizeme/">UntrackMe&lt;/a> which redirects Youtube, Twitter and Instagram links to their free alternatives. Reddit support was just added 2 weeks ago.&lt;/p>
&lt;p>I recommend exclusively using the free alternative links when using a web browser. It&amp;rsquo;s also best if you send others the alternative links when sharing content. The alternatives don&amp;rsquo;t always support all the features of the official website.&lt;/p>
&lt;p>As a final note, &lt;a href="https://www.urbandictionary.com/define.php?term=Goolag">Goolag&lt;/a> has been known to block Invidious instances since they drive privacy-conscious users away from youtube.com. In general social media giants tend not to be very friendly to alternatives because they want you using their official website. So don&amp;rsquo;t be surprised if the alternatives suddenly break. There are always free software tools such as &lt;a href="https://ytdl-org.github.io/youtube-dl/">youtube-dl&lt;/a> you can use to avoid the proprietary walled gardens until project maintainers get the alternatives back up and running.&lt;/p></description></item><item><title>Atom and RSS</title><link>https://0gitnick.xyz/atom-and-rss/</link><pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/atom-and-rss/</guid><description>&lt;h2 id="atomrss">Atom/RSS&lt;/h2>
&lt;p>Most netizens are vaguely familiar with this symbol: &lt;img src="../../feed-icon-28x28.png" alt="RSS icon"> It represents &lt;a href="https://en.wikipedia.org/wiki/Atom_(standard)">Atom&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/RSS">RSS&lt;/a>. From Wikipedia (&lt;a href="https://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0&lt;/a>):&lt;/p>
&lt;h4 id="rss">RSS&lt;/h4>
&lt;blockquote>
&lt;p>&amp;ldquo;RSS (RDF Site Summary or Really Simply Syndication) is a web feed that allows users and applications to access updates to websites in a standardized, computer-readable format. These feeds can, for example, allow a user to keep track of many different websites in a single news aggregator. The news aggregator will automatically check the RSS feed for new content, allowing the list to be automatically passed from website to website or from website to user&amp;hellip;Websites usually use RSS feeds to publish frequently updated information, such as blog entries, news headlines, or episodes of audio and video series.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h4 id="atom">Atom&lt;/h4>
&lt;blockquote>
&lt;p>&amp;ldquo;The Atom format was developed as an alternative to RSS. &lt;a href="https://en.wikipedia.org/wiki/Benjamin_Trott">Ben Trott&lt;/a>, an advocate of the new format that became Atom, believed that RSS had limitations and flaws—such as lack of on-going innovation and its necessity to remain backward compatible—and that there were advantages to a fresh design.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>So that&amp;rsquo;s Atom and RSS in short. In the real world Atom/RSS feeds really don&amp;rsquo;t get the usage they deserve. For me an Atom/RSS feed reader is indispensable. Instead of checking 20 different webpages manually scanning each page for new content, I can just open my feed reader. It shows me all my web content in a streamlined fashion. Unlike social media, I have full control over my Atom/RSS feeds. In fact, Atom/RSS feeds are a big reason I don&amp;rsquo;t have social media accounts and haven&amp;rsquo;t for some time. Why go on social media when you can make it come to you? It&amp;rsquo;s easy to get feeds for most popular social media sites including but not limited to Youtube, Reddit, Tumblr, Medium, Wordpress, Blogger and Twitter.&lt;/p>
&lt;p>I&amp;rsquo;m not inherently against social media. I&amp;rsquo;m just against proprietary walled gardens which is most social media that people actually use. Atom/RSS feeds make it easy to keep your distance from social media without missing out. I&amp;rsquo;m aware I could use &lt;a href="http://www.gnu.org/philosophy/free-sw.html">free&lt;/a>, federated social networks like &lt;a href="https://en.wikipedia.org/wiki/Mastodon_(software)">Mastadon&lt;/a>. I just don&amp;rsquo;t have a need. For future reference, if I sign up for social media, I&amp;rsquo;ll link my profile on my about page in the &lt;a href="../../about#identity">identity&lt;/a> section. Any social media accounts not linked under the identity section claiming to belong to me or even appearing to be mine are &lt;a href="https://en.wikipedia.org/wiki/Sockpuppet_(Internet)">sockpuppets&lt;/a>. For now I just have this blog.&lt;/p>
&lt;h2 id="how-to-use-atomrss">How to Use Atom/RSS&lt;/h2>
&lt;p>Now that you know what Atom/RSS is and you have an idea what it&amp;rsquo;s used for, I&amp;rsquo;ll move on to the meat of this post: how to use Atom/RSS. To begin using Atom/RSS yourself, you&amp;rsquo;ll need to install a feed reader. There is mature feed reader software available for all major platforms including mobile. Decent feed readers support both Atom and RSS and you probably won&amp;rsquo;t need to know which is which. Most sites including this one still use RSS. I do plan to eventually switch &lt;a href="../../index.xml">my site feed&lt;/a> over to Atom since it&amp;rsquo;s more modern.&lt;/p>
&lt;p>Once you find the feed symbol &lt;img src="../../feed-icon-28x28.png" alt="RSS icon"> on the webpage with the feed you want, just copy paste the link adding it into your feed reader and you&amp;rsquo;re golden. After that your reader will take care of retrieving the content from that feed automatically. If you can&amp;rsquo;t find a feed icon on a site, that doesn&amp;rsquo;t mean the site doesn&amp;rsquo;t support RSS. They may just not advertise it. Search the web for that site&amp;rsquo;s RSS feed to see if anything turns up. If nothing turns up, there are websites that will parse the page you want turning it into a web feed. As long as you&amp;rsquo;re not required to log in to view the content, you can probably find an RSS feed for it.&lt;/p>
&lt;p>Decent Atom/RSS aggregators allow you to create groups of feeds, so you can combine related feeds or view them separately. You can even aggregate all your feeds into 1 big feed if that&amp;rsquo;s what you want. With Atom/RSS, the choice is yours. If you stop reading a feed, it&amp;rsquo;s as easy to remove from your aggregator as it was to add. Sites with lots of content offer Atom/RSS feeds based on category. For example if you&amp;rsquo;re only interested in my posts about &amp;ldquo;computing&amp;rdquo;, you can subscribe only to &lt;a href="../../tags/computing/index.xml">this RSS feed&lt;/a>.&lt;/p>
&lt;p>The experience you have with Atom/RSS ultimately boils down to the features your feed reader software has and how you set up your feeds. The greatest benefit of Atom/RSS in my opinion is &lt;strong>Atom/RSS gives you have full control over the information you see and how it&amp;rsquo;s organized&lt;/strong>. Popular social media outlets rarely give you that level of control, so definitely give Atom/RSS a try if you&amp;rsquo;re not already using them.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>I was motivated to write this post for the same reason I was motivated to write about &lt;a href="../../using-email">using email&lt;/a>. Seeing the way most people consume feed-based digital content leaves something to be desired. Most netizens don&amp;rsquo;t know there&amp;rsquo;s an easier way to get web content than going to each individual website meanwhile capturing all the &lt;a href="https://www.urbandictionary.com/define.php?term=Goolag">Goo-lag&lt;/a> &lt;a href="https://www.gnu.org/philosophy/javascript-trap.html">analytics&lt;/a> and tracking cookies in their browser.&lt;/p>
&lt;p>I made this post just to spread awareness that Atom and RSS are useful, easy to use, and ubiquitous on websites. I&amp;rsquo;d really like to see them gain more popularity. It was one of those things I couldn&amp;rsquo;t &lt;em>not&lt;/em> write about because so many people are missing out on it. People who are already aware of Atom/RSS probably didn&amp;rsquo;t learn much but this post is only an introduction for those that have never used them before. Regardless, I hope you learned something and happy aggregating!&lt;/p></description></item><item><title>Get an Anonymous Phone Number with DTMF.io</title><link>https://0gitnick.xyz/get-an-anonymous-phone-number-with-dtmf.io/</link><pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/get-an-anonymous-phone-number-with-dtmf.io/</guid><description>&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>I am not in any way affiliated with &lt;a href="https://dtmf.io/">DTMF.io&lt;/a>. I was not paid to write this (I wish). If I am paid to write about something, I will always disclose it. I will never write things I do not agree with for money. I just happen to think &lt;a href="https://dtmf.io/">DTMF.io&lt;/a> is a good service and people ought to know about it.&lt;/p>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>One reason I feel compelled to write about privacy and anonymity is there are so many poorly researched guides out there that don&amp;rsquo;t offer real anonymity, but advertise that they do. Existing guides either have a &lt;a href="../../use-free-software">freedom&lt;/a> issue, privacy issue, or other issue which makes them less than ideal. &lt;a href="https://dtmf.io/">DTMF.io&lt;/a> really impressed me, so I decided to share it with all of you. Also, I plan on writing a guide on anonymous ecommerce in the future. When I do that, this post will make a good reference since a phone number is required in many cases when doing ecommerce.&lt;/p>
&lt;p>Sometimes I get asked why I insist on such high standards of anonymity, privacy and freedom in everything. What on earth kind of threat model do I have to insist on such high standards? No, I don&amp;rsquo;t possess state secrets or anything of that level. If I did, I wouldn&amp;rsquo;t be blogging about Big Brother since Big Brother is probably on the list of keywords that gets flagged by &lt;a href="https://en.wikipedia.org/wiki/List_of_federal_agencies_in_the_United_States">3 letter agencies&lt;/a>. My philosophy on this actually aligns pretty closely with &lt;a href="https://stallman.org/">Richard Stallman&lt;/a>. I&amp;rsquo;m just very ethically motivated. Specifically, it&amp;rsquo;s a matter of preserving my &lt;a href="../../use-free-software">freedom&lt;/a> and resisting Big Brother. It&amp;rsquo;s not just that &lt;em>I&lt;/em> want to resist Big Brother. I think &lt;em>everyone&lt;/em> ought to hold high standards like I do in order to &lt;a href="../../raising-the-bar-on-privacy">raise the bar on privacy&lt;/a> and protect democracy.&lt;/p>
&lt;h2 id="problems-with-existing-anonymous-phone-number-guides">Problems with Existing Anonymous Phone Number Guides&lt;/h2>
&lt;p>I&amp;rsquo;ll begin by pointing out a few problems with existing guides out there for obtaining an anonymous phone number. Let&amp;rsquo;s take a look at &lt;a href="https://www.appsverse.com/blog/heres-how-to-get-an-untraceable-phone-number/">appsverse&lt;/a> as a case study. Their first method for getting an untraceable phone number is a burner phone.&lt;/p>
&lt;h4 id="why-not-use-burner-phones">Why Not Use Burner Phones?&lt;/h4>
&lt;p>There are 3 major problems that come to mind with burner phones:&lt;/p>
&lt;ol>
&lt;li>They are &lt;a href="https://www.androidauthority.com/owning-smartphone-human-environment-cost-656030/">materially wasteful&lt;/a>. All the effort that went into manufacturing the burner phone and it&amp;rsquo;s just going to be used temporarily, perhaps just once, then become e-waste. They&amp;rsquo;re bad for the environment.&lt;/li>
&lt;li>They run &lt;a href="https://www.gnu.org/proprietary/">proprietary&lt;/a> operating systems and software. This is bad for your freedom. Because of their freedom issues, there&amp;rsquo;s no way to ensure they don&amp;rsquo;t covertly surveil you. The whole point is that they&amp;rsquo;re supposed to be anonymous, so this is kind of self-defeating.&lt;/li>
&lt;li>You&amp;rsquo;ll need to remove the batteries or put the phone in a faraday bag when you aren&amp;rsquo;t using it. Turning it off isn&amp;rsquo;t effective since you might accidentally hit the power button. Since we&amp;rsquo;re trying to preserve the number&amp;rsquo;s anonymity against Big Brother, it can&amp;rsquo;t ping nearby cell towers at places you&amp;rsquo;re associated with. You can&amp;rsquo;t send or receive sms or calls unless you take it out of the bag, so you&amp;rsquo;ll have to only use it at a remote location. Going to a remote location just to make a call or check your messages is very inconvenient.&lt;/li>
&lt;/ol>
&lt;h4 id="just-hide-my-caller-id">Just Hide My Caller ID?&lt;/h4>
&lt;p>The second method appsverse suggests is hiding your caller ID. This isn&amp;rsquo;t anonymous against Big Brother so we can disregard it.&lt;/p>
&lt;h4 id="what-about-apps">What About Apps?&lt;/h4>
&lt;p>Method 3 is phone apps. Appsverse recommends phoner, which is a proprietary app that give you burner phone numbers. The problem is &lt;em>most&lt;/em> of these apps are proprietary and you should never install them. Don&amp;rsquo;t go through the Goo-lag Play Store or crApple App Store looking for burner phone number apps. Almost all of them are proprietary garbage. Another example is &lt;a href="https://www.burnerapp.com">Burnerapp.com&lt;/a>. It&amp;rsquo;s proprietary and requires your name, email and phone number tied to your real identity. Also, there&amp;rsquo;s no way to pay anonymously. How can your phone number be truly anonymous if you have to identify yourself to get it?&lt;/p>
&lt;h2 id="sms-privacy">SMS Privacy&lt;/h2>
&lt;p>&lt;a href="https://smsprivacy.org/">SMSPrivacy.org&lt;/a> is worth a mention. You can send and receive sms messages over a web interface. The sign up process doesn&amp;rsquo;t require providing any personal information. It has a &lt;a href="http://smspriv6fynj23u6.onion/">v2 onion address&lt;/a> and doesn&amp;rsquo;t require Javascript which is always a plus. The only gripe I have is the price. 0.0015 BTC per day per phone number is asking too much for most people. It&amp;rsquo;s even more expensive for a physical phone number that you can use to sign up for websites.&lt;/p>
&lt;h2 id="introducing-dtmfio">Introducing DTMF.io&lt;/h2>
&lt;p>&lt;a href="https://dtmf.io/">DTMF.io&lt;/a> is the best service I&amp;rsquo;ve come across for an anonymous phone number. Like SMS Privacy, it can be accessed over a web portal. There is no third party Javascript. The web portal is available in several languages. It requires no &lt;a href="https://en.wikipedia.org/wiki/Personally_identifiable_information">personally identifiable information&lt;/a> (PII) to sign up and supports 2-factor authentication. Unlike SMS Privacy, it has a more reasonable price tag. It has a &lt;a href="http://dtmfiovjh42uviqez6qn75igbagtiyo724hy3rdxm77dy2m5tt7lbaqd.onion/">v3 onion address&lt;/a> for Tor. It supplies landline, mobile, SIM mobile and toll-free phone numbers from all over the world. You can pay with Bitcoin, Lightning, Ethereum, Litecoin, Monero and Perfect Money. Monero support is a huge plus since it&amp;rsquo;s the only cryptocurrency with private payments by default. You can also make calls using SIP or your web browser. SIP is convenient because it allows you to bypass &lt;a href="https://www.gnu.org/philosophy/javascript-trap.html">the Javascript trap&lt;/a> of using the web portal. Like SMS Privacy, it does not &lt;em>require&lt;/em> you to enable Javascript in the browser for sign up or sms, although calling won&amp;rsquo;t work without it. DTMF.io has an API available to pro and business customers allowing automated account control, sms and calling. Their &lt;a href="https://dtmf.io/terms">terms of service&lt;/a> and &lt;a href="https://dtmf.io/privacy">privacy policy&lt;/a> seem reasonable enough. You can&amp;rsquo;t expect much privacy using sms anyway, which is why I can&amp;rsquo;t recommend using it for very much except maybe website sign up and only if it&amp;rsquo;s required. I also recommend you avoid sharing PII using your anonymous number. Keep in mind a social graph could still be constructed of which numbers you&amp;rsquo;re contacting and at what time. To reduce linkability, you should use a different number for each website you sign up for, if you can afford it.&lt;/p>
&lt;p>I know I criticized using apps for an anonymous number before, but that&amp;rsquo;s because they are proprietary. DTMF.io supports SIP. So, you can use free (as in freedom) SIP calling apps to make calls or you can use the official free (as in freedom) &lt;a href="https://dtmf.io/app">DTMF.io app&lt;/a> for sms and calling currently available on Android. You can build it from source for Android, iOS, Windows, Mac and GNU/Linux. Voice calls aren&amp;rsquo;t currently supported in Windows or GNU/Linux though. It does not require Goolag Play Services and only asks for permissions it needs. It will even work without camera, microphone or contacts permissions enabled.&lt;/p>
&lt;p>The only recommendation I&amp;rsquo;d make if you plan on using it is that you pay anonymously and don&amp;rsquo;t provide an identifying email address on sign up. Also, if you use the Android app, you should proxy the connection over a VPN or Tor (with &lt;a href="https://guardianproject.info/apps/org.torproject.android/">Orbot&lt;/a>) that way the service never gets your real IP address. Use Tor Browser with the onion address to access it over the web. Other than that I don&amp;rsquo;t know what more you can ask for. The other anonymous phone number services (except for SMS Privacy) either don&amp;rsquo;t allow you to pay anonymously, require identifying information, have proprietary Javascript, or some other problem that makes them unsuitable. As far as I can tell, DTMF.io is the only game in town for a cheap, ethical, anonymous phone number. If you&amp;rsquo;re using anything else, you should definitely make the switch.&lt;/p></description></item><item><title>Remote Fair Coin Flipping with Friends</title><link>https://0gitnick.xyz/remote-fair-coin-flipping-with-friends/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/remote-fair-coin-flipping-with-friends/</guid><description>&lt;p>Suppose you and some friends want to flip a coin without meeting up. It has to be done over an &lt;a href="https://en.wikipedia.org/wiki/Secure_channel">authenticated communication channel&lt;/a> such as a secure messaging app. How can you do it such that nobody can predict the final result? I&amp;rsquo;ll explain how to do it fairly. I&amp;rsquo;m well aware of common coin algorithms. This post is mostly just for amusement. It&amp;rsquo;s my half-hearted attempt at designing a cryptosystem. More on that later.&lt;/p>
&lt;h2 id="coin-flipping">Coin Flipping&lt;/h2>
&lt;h4 id="flipping-a-coin-with-a-friend">Flipping a Coin with a Friend&lt;/h4>
&lt;p>These are the steps for performing a single coin flip:&lt;/p>
&lt;ol>
&lt;li>Flip a physical coin. Heads represents 0. Tails represents 1.&lt;/li>
&lt;li>Append to the result of step 1 a space followed by a &lt;a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce&lt;/a> that your friend cannot easily guess. Never reuse the nonce. For tails, it will look like this:&lt;br>
&lt;code>1 munxpawrqoivzhujfxbxwcang&lt;/code>&lt;/li>
&lt;li>Calculate the SHA-256 hash of the string in step 2 (in &lt;a href="https://www.gnu.org/software/bash/">Bash&lt;/a>):&lt;br>
&lt;code>echo -n &amp;quot;1 munxpawrqoivzhujfxbxwcang&amp;quot; | sha256sum&lt;/code>&lt;/li>
&lt;li>Publish the hash from step 3 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until your friend completes step 4.&lt;/li>
&lt;li>Publish the result from step 2 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until your friend completes step 6.&lt;/li>
&lt;li>Calculate the hash of your friend&amp;rsquo;s step 2 result comparing it to their step 3 result. If it doesn&amp;rsquo;t match, then one of you has incorrectly computed the hash.&lt;/li>
&lt;li>If the hashes match, remove the space and nonce from both you and your friend&amp;rsquo;s step 2 results. Then &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR&lt;/a> both results.&lt;/li>
&lt;li>Convert the value from step 9 back to heads or tails as defined in step 1.&lt;/li>
&lt;/ol>
&lt;h4 id="flipping-multiple-coins-with-a-friend">Flipping Multiple Coins with a Friend&lt;/h4>
&lt;p>If you want to flip multiple coins, you &lt;em>can&lt;/em> repeat steps 1-10 of the single coin flip, but that&amp;rsquo;s very cumbersome. There&amp;rsquo;s an easier solution. Suppose you and your friend want to flip N coins:&lt;/p>
&lt;ol>
&lt;li>Flip N physical coins. Heads represents 0. Tails represents 1. Concatenate the coin flip results.&lt;/li>
&lt;li>Append to the result of step 1 a space followed by a &lt;a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce&lt;/a> that your friend cannot easily guess. Never reuse the nonce. For the sequence heads tails heads tails heads, it will look like this:&lt;br>
&lt;code>01010 yabynkgpbfnagntyzvgvgmwaa&lt;/code>&lt;/li>
&lt;li>Calculate the SHA-256 hash of the string in step 2 (in &lt;a href="https://www.gnu.org/software/bash/">Bash&lt;/a>):&lt;br>
&lt;code>echo -n &amp;quot;01010 yabynkgpbfnagntyzvgvgmwaa&amp;quot; | sha256sum&lt;/code>&lt;/li>
&lt;li>Publish the hash from step 3 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until your friend completes step 4.&lt;/li>
&lt;li>Publish the result from step 2 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until your friend completes step 6.&lt;/li>
&lt;li>Calculate the hash of your friend&amp;rsquo;s step 2 result comparing it to their step 3 result. If it doesn&amp;rsquo;t match, then one of you has incorrectly computed the hash.&lt;/li>
&lt;li>If the hashes match, remove the space and nonce from both you and your friend&amp;rsquo;s step 2 results. Then &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR&lt;/a> both results.&lt;/li>
&lt;li>Convert the values from step 9 back to heads or tails as defined in step 1.&lt;/li>
&lt;/ol>
&lt;h4 id="flipping-a-coin-with-3-friends">Flipping a Coin with 3+ Friends&lt;/h4>
&lt;p>It &lt;em>is&lt;/em> possible to perform a remote fair coin flip with 3 or more participants, but there are 3 caveats. One caveat is depending on how many participants you have, it could take quite a bit longer than the previous cases where you only have 1 other person. This is because everyone has to participate in the coin flip if everyone wants to ensure fairness. Otherwise the other participants can collude to manipulate the coin flip. The second caveat is you need to have a &lt;strong>robust&lt;/strong> authenticated group communication channel resistant to &lt;a href="https://en.wikipedia.org/wiki/Replay_attack">replay attacks&lt;/a> and other funny business such as messages being edited/deleted without indication and out of order message receipt. But maybe that&amp;rsquo;s taking my cryptosystem too seriously. The third caveat is increased complexity. All participants will need to know how to perform all the steps and there&amp;rsquo;s a greater chance someone doesn&amp;rsquo;t do step 3 right. Regardless, here&amp;rsquo;s how you flip a coin with 3+ friends:&lt;/p>
&lt;ol>
&lt;li>Flip a physical coin. Heads represents 0. Tails represents 1.&lt;/li>
&lt;li>Append to the result of step 1 a space followed by a &lt;a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce&lt;/a> that your friends cannot easily guess. Never reuse the nonce. For tails, it will look like this:&lt;br>
&lt;code>1 munxpawrqoivzhujfxbxwcang&lt;/code>&lt;/li>
&lt;li>Calculate the SHA-256 hash of the string in step 2 (in &lt;a href="https://www.gnu.org/software/bash/">Bash&lt;/a>):&lt;br>
&lt;code>echo -n &amp;quot;1 munxpawrqoivzhujfxbxwcang&amp;quot; | sha256sum&lt;/code>&lt;/li>
&lt;li>Publish the hash from step 3 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until all your friends complete step 4.&lt;/li>
&lt;li>Publish the result from step 2 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until all your friends complete step 6.&lt;/li>
&lt;li>Calculate the hashes of your friends' step 2 results comparing it to their step 3 results. If they don&amp;rsquo;t match, then one of you has incorrectly computed the hash.&lt;/li>
&lt;li>If the hashes match, remove the space and nonce from both you and your friends' step 2 results. Then &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR&lt;/a> all results.&lt;/li>
&lt;li>Convert the value from step 9 back to heads or tails as defined in step 1.&lt;/li>
&lt;/ol>
&lt;h4 id="flipping-multiple-coins-with-3-friends">Flipping Multiple Coins with 3+ Friends&lt;/h4>
&lt;p>This is the most difficult coin flip: multiple coins with more than 2 participants. I think you get the gist of it by now and I don&amp;rsquo;t really need to type all this out, but I will for completeness sake. Not much will be changed from the above steps though.&lt;/p>
&lt;ol>
&lt;li>Flip N physical coins. Heads represents 0. Tails represents 1. Concatenate the coin flip results.&lt;/li>
&lt;li>Append to the result of step 1 a space followed by a &lt;a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce&lt;/a> that your friends cannot easily guess. Never reuse the nonce. For the sequence heads tails heads tails heads, it will look like this:&lt;br>
&lt;code>01010 yabynkgpbfnagntyzvgvgmwaa&lt;/code>&lt;/li>
&lt;li>Calculate the SHA-256 hash of the string in step 2 (in &lt;a href="https://www.gnu.org/software/bash/">Bash&lt;/a>):&lt;br>
&lt;code>echo -n &amp;quot;01010 yabynkgpbfnagntyzvgvgmwaa&amp;quot; | sha256sum&lt;/code>&lt;/li>
&lt;li>Publish the hash from step 3 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until all your friends complete step 4.&lt;/li>
&lt;li>Publish the result from step 2 onto the authenticated communication channel.&lt;/li>
&lt;li>Pause until all your friends complete step 6.&lt;/li>
&lt;li>Calculate the hashes of your friends' step 2 results comparing it to their step 3 results. If they don&amp;rsquo;t match, then one of you has incorrectly computed the hash.&lt;/li>
&lt;li>If the hashes match, remove the space and nonce from both you and your friends' step 2 results. Then &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR&lt;/a> all results.&lt;/li>
&lt;li>Convert the values from step 9 back to heads or tails as defined in step 1.&lt;/li>
&lt;/ol>
&lt;h2 id="rationale">Rationale&lt;/h2>
&lt;p>10 steps just to flip coins seems like a lot. So why all the steps?&lt;/p>
&lt;p>Publishing the cryptographic hashes &lt;em>before&lt;/em> the plaintext ensures that so long as there&amp;rsquo;s at least 1 honest participant, the final results can&amp;rsquo;t be tampered with. An honest participant is defined as a participant that faithfully completes all the steps.&lt;/p>
&lt;p>The reason for the nonce is the following: It would be trivial to convert the cryptographic hash of just &lt;code>0&lt;/code> or just &lt;code>1&lt;/code> back into its plaintext value. That&amp;rsquo;s why you need to append a random value at the end. The reason the random value must be a nonce is the same reason you can&amp;rsquo;t just hash a &lt;code>0&lt;/code> or a &lt;code>1&lt;/code>. If you reuse the random value, then the other participant(s) could catch on that you use the same value every time and collude to manipulate the final result. The space just delimits the coin flip(s) from the nonce.&lt;/p>
&lt;p>XOR was chosen as opposed to AND because AND would obviously bias the result toward tails.&lt;/p>
&lt;h2 id="attack-vectors">Attack Vectors&lt;/h2>
&lt;h4 id="publishing-invalid-data">Publishing Invalid Data&lt;/h4>
&lt;p>One attack vector against my toy cryptosystem is just using nonsense as the plaintext. This will fail because it can just be discarded by all other participants. If the plaintext is valid but doesn&amp;rsquo;t match the hash, then the plaintext can again be discarded. This type of attacker won&amp;rsquo;t be able to verify the coin flip as unpredictable, but that&amp;rsquo;s their punishment for not following the rules.&lt;/p>
&lt;h4 id="synchronicity-attack">Synchronicity Attack&lt;/h4>
&lt;p>A more devastating attack with no clear solution is when an attacker doesn&amp;rsquo;t publish anything, stalling the coin flip indefinitely. The first intuition for solving this is to start a timer as soon as the first hash is published and after the agreed upon time has passed, the attacker is simply excluded from participating. But this won&amp;rsquo;t work because the attacker can just publish &lt;em>near&lt;/em> the agreed upon time limit. Due to latency and asynchronicity of messages, if successful, some participants will count the attacker&amp;rsquo;s contribution to the coin flip while others will not. Honest participants won&amp;rsquo;t be able to agree on the final results. Therefore the integrity of the results will be compromised. Worse yet, it won&amp;rsquo;t be possible for the participants to even detect this unless they all publish their final results and cross-compare everything. Even then, an attacker can just lie about their results confusing everybody.&lt;/p>
&lt;p>Another idea at resolving the integrity issue would be to designate a leader to declare which participants' contributions count. Therefore the leader would have to be trusted not to manipulate the results. But the whole point of the coin flip is you shouldn&amp;rsquo;t have to trust the other participants, so a leader defeats the purpose of the cryptosystem.&lt;/p>
&lt;p>You might be thinking more democratically though. Instead of having a single leader who acts like a dictator of the coin flip, you have a democracy. Once some majority of the participants has contributed to the coin flip, simply compute the result then. Trusting the majority is better than trusting a single participant. But this also fails because it could just happen by coincidence that two contributions happen at the same time, or an attacker collides them on purpose. In that case some participants will count the attacker&amp;rsquo;s contribution to the coin flip while others will count some other contribution. Honest participants won&amp;rsquo;t be able to agree on the final results. The integrity of the results will be compromised yet again.&lt;/p>
&lt;h2 id="why-you-dont-roll-your-own-crypto">Why You Don&amp;rsquo;t Roll Your Own Crypto&lt;/h2>
&lt;p>By now you should have begun to see why a more advanced &amp;ldquo;common coin&amp;rdquo; algorithm is needed. This is a cryptosystem that doesn&amp;rsquo;t have a good way to prevent an attacker from compromising the integrity of the coin flip, or forever stalling it. Any attempt to solve this problem just ends up pushing it back a step. In other words, this cryptosystem I&amp;rsquo;ve created is hopelessly broken and the only way to fix it is a completely different algorithm. But I can get away with it because I can say it&amp;rsquo;s just a toy cryptosystem for fun. It should never be used for any real-world application. Use a common coin instead. And it&amp;rsquo;s also an example of why you should never roll your own crypto. Even when it seems foolproof, there&amp;rsquo;s always weird edge cases that ruin everything. This post shows a neat thing you can do with friends and also demonstrates why you should always use established cryptosystems rather than inventing your own. I hope you enjoyed it.&lt;/p></description></item><item><title>Using Email</title><link>https://0gitnick.xyz/using-email/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/using-email/</guid><description>&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>Email is a very old internet standard, predating the world wide web. It was first defined in 1982. It was &lt;a href="https://tools.ietf.org/html/rfc5321">updated&lt;/a> in 2008 and remains in widespread use. It&amp;rsquo;s not a great protocol by today&amp;rsquo;s standards, but we&amp;rsquo;re all stuck with it. You almost certainly already have an email account. Although everyone has an email account, not everyone understands how email works or how to make the most of their account. Almost everyone with an email account just chose the first free, convenient option available for an email service provider. I know that&amp;rsquo;s what I did at first. Most people just use Gmail, Outlook, Yahoo, AOL, or one of the other top providers. Knowing this has motivated me to write this post because I fear that others are missing out on a better email experience.&lt;/p>
&lt;h2 id="choosing-an-email-service-provider">Choosing an Email Service Provider&lt;/h2>
&lt;p>The first step before using email is choosing an email service provider. Email is a &lt;a href="https://en.wikipedia.org/wiki/Federation_%28information_technology%29">federated&lt;/a> protocol. This means that no single entity &amp;ldquo;owns&amp;rdquo; email. If you want, you can create your own email provider and use it. Instead of &lt;a href="mailto:john@gmail.com">john@gmail.com&lt;/a>, your domain would be something like &lt;a href="mailto:john@johnsdomain.com">john@johnsdomain.com&lt;/a>. But running your own mail server can be expensive and time-consuming. Mail servers also have many moving parts and require maintenance, so I won&amp;rsquo;t be writing about how to set up your own mail server. It&amp;rsquo;s just not a realistic option for non-technical users of email.&lt;/p>
&lt;p>The best alternative to self-hosting is to pick an email service provider wisely. This list is obviously subjective, but here are some criteria which a good email service provider will meet:&lt;/p>
&lt;ul>
&lt;li>Only free software&lt;/li>
&lt;li>IMAP/POP3 support&lt;/li>
&lt;li>No logs policy&lt;/li>
&lt;li>Inside a privacy-respecting country&lt;/li>
&lt;li>Transparency reports&lt;/li>
&lt;li>Anonymous sign up&lt;/li>
&lt;li>Anonymous payment methods&lt;/li>
&lt;li>2-factor authentication (TOTP)&lt;/li>
&lt;li>Inbound encryption (PGP)&lt;/li>
&lt;li>Tor support&lt;/li>
&lt;li>Sustainable business model&lt;/li>
&lt;li>Well-established&lt;/li>
&lt;li>Support team / help center&lt;/li>
&lt;li>Migration support&lt;/li>
&lt;/ul>
&lt;h4 id="free-software">Free Software&lt;/h4>
&lt;p>The first and most important requirement is that the email provider uses &lt;em>exclusively&lt;/em> free software. This means their website and webmail portal do &lt;em>not&lt;/em> require &lt;a href="https://www.gnu.org/philosophy/javascript-trap.en.html">proprietary Javascript&lt;/a>. Javascript licenses should be included somewhere on the site or it should work without Javascript enabled. Also, all backend software should be free. In other words, if an email provider uses Mac or Windows to host the email server, it&amp;rsquo;s as good as garbage and you shouldn&amp;rsquo;t touch it with a ten foot pole. It should probably run on GNU/Linux or FreeBSD. Good email providers support IMAP and POP3 for accessing email. Those protocols allow you to access emails from your own &lt;a href="https://en.wikipedia.org/wiki/Email_client">email client&lt;/a> on any device. More on that later. Now onto security and privacy.&lt;/p>
&lt;h4 id="privacy-and-security">Privacy and Security&lt;/h4>
&lt;p>The email provider should have a policy of not keeping logs. This brings me to my next and important point that the email provider needs to reside within a privacy-respecting country. The legal requirements for collecting logs and sharing user data are going to differ depending on which country it&amp;rsquo;s in. Using an email provider based in the US or the UK is a very bad idea. Those countries don&amp;rsquo;t have strong privacy considerations and your email data (and metadata) won&amp;rsquo;t be safe. Email providers in those countries &lt;em>can&amp;rsquo;t&lt;/em> guarantee safety of your emails. You can get a lot of information about what data is collected just by actually reading the Terms of Service when you sign up. Don&amp;rsquo;t use an email provider like Gmail, Outlook, or Yahoo that logs all your emails and sells them to advertisers. If it&amp;rsquo;s in the Terms of Service that the service shares non-trivial data with third parties, then that email service is garbage and you shouldn&amp;rsquo;t use it. In fact, good email providers will &lt;em>never&lt;/em> share any data without a court order first. In order to take an email provider&amp;rsquo;s claims of protecting your data seriously, the email provider should have a transparency report providing as much detail as is legal about what information they can be forced to turn over, when, and how often it actually happens.&lt;/p>
&lt;p>Also, email providers can&amp;rsquo;t share information about you they don&amp;rsquo;t have. If the email service provider offers anonymous sign up (they don&amp;rsquo;t request your name, address, phone number or other PII), this is a good sign. They should also offer anonymous payment mechanisms (cash or cryptocurrency). You should not provide personal information just to sign up for an email account. Any email service that requires you to probably doesn&amp;rsquo;t care very much about your privacy. For security, your email provider should use two-factor authentication to prevent your account from being stolen. In your browser, check the email service&amp;rsquo;s website for TLS 1.3. If the email service website doesn&amp;rsquo;t support TLS 1.3, that&amp;rsquo;s a bad sign. Check that they support DANE/TLSA. They should claim to encrypt the hard disks of the email server or the email accounts themselves to prohibit data theft. They shouldn&amp;rsquo;t ever send any email data unencrypted. It should always use TLS. The email service should provide you with &amp;ldquo;inbound encryption&amp;rdquo;. Inbound encryption means you can generate a keypair and provide the email service your public key to encrypt your emails with. This means the email service encrypts your emails, as they are received, on their servers with a key only you have access to. If your emails are later stolen or requested via court order, the service will only be able to provide encrypted versions of your emails unreadable to anyone except you.&lt;/p>
&lt;p>Another good sign is if the email service supports access over Tor. The webmail client should support access over Tor Browser. It shouldn&amp;rsquo;t block tor connections. If it has an onion address, then the email service went through extra trouble for Tor support. As I said, email providers can&amp;rsquo;t share information about you they don&amp;rsquo;t have. If you connect over Tor, you are protecting your IP address. That means you don&amp;rsquo;t have to trust the email service not to log your IP when you access email.&lt;/p>
&lt;h4 id="business-operations">Business Operations&lt;/h4>
&lt;p>I&amp;rsquo;ve gone over some of the technical details, but I haven&amp;rsquo;t mentioned the business model yet. When you sign up for an email service, you need to check how they are supporting the service financially. There&amp;rsquo;s a famous adage about online products: &amp;ldquo;If it&amp;rsquo;s free, you&amp;rsquo;re the product&amp;rdquo;. Unless your email service provider is a subscription service, donation funded or the host is just an altruist, then your emails and metadata are probably being sold to advertisers. Also you&amp;rsquo;ll want to make sure they are &amp;ldquo;well-established&amp;rdquo;. The service provider shouldn&amp;rsquo;t be too obscure. This is subjective but you probably want a few thousand other people to also be using the service. This is an indicator that the service is reliable. People want email to &amp;ldquo;just work&amp;rdquo;. If it has lots of downtime, is slow or it doesn&amp;rsquo;t work well, it won&amp;rsquo;t take long for people to switch to another service. Another indicator of reliability is that it has been around for a few years without major data breaches. If there have been data breaches, was the email service quick to respond? Do they have a dedicated 24/7 support team or help center for answering any questions you might have? If you can&amp;rsquo;t get your emails one day, will you have somebody to contact for support? A highly available, quick-to-reply support team is a good sign that the email service is competent. The email service should also have migration support. Migration support makes it easier to switch email providers if you ever want to use a different one.&lt;/p>
&lt;p>Nothing I&amp;rsquo;ve mentioned gives you a 100% guarantee that the email provider is secure, will stay in operation, doesn&amp;rsquo;t sell your data to advertisers, or is competent. But the more criteria that the email provider meets, the better the chances that it&amp;rsquo;s a good one. At some point you have to say &amp;ldquo;Okay, this email service meets so many criteria of being ethical that it either actually operates ethically &lt;em>or&lt;/em> is so good at faking it I could never hope to tell the difference anyway&amp;rdquo;. Once you do enough research where you can confidently say that, then you should consider using it. There are other features email services provide that I haven&amp;rsquo;t mentioned such as email aliasing and email storage space. Those depend heavily on how you use email and if I listed all possible features of an email service, I&amp;rsquo;d never finish this post. But I think I have covered some of the key features to look for when choosing an email service.&lt;/p>
&lt;h2 id="using-an-email-client">Using an Email Client&lt;/h2>
&lt;p>The most common way by far to access email nowadays is using webmail which is a shame. Webmail is when you access your email account in the browser. Remember that email predates the web, so it doesn&amp;rsquo;t rely on the web at all. It&amp;rsquo;s just that people have been spoiled by web apps and never need to leave the browser environment any more. Using an email client, also known as a user agent, is a more satisfying way to use email. It provides functionality such as easy account navigation, email filtering, email flagging, calendaring, contacts, and more. Webmail also provides the same features, but often requires running proprietary Javascript to accomplish the same tasks. Using an email client gives you a single, unified user experience that you can customize to your liking for all email accounts, even if the accounts are on different email services. Using an email client empowers you to use inbound encryption, managing your encryption keys yourself. I just want to quickly mention that &lt;a href="https://protonmail.com">Protonmail&lt;/a> requires installing a proprietary &lt;a href="https://protonmail.com/bridge">bridge application&lt;/a> for IMAP and SMTP support. If you want to use Protonmail with your own email client, you&amp;rsquo;ll have to install their software. I&amp;rsquo;m not trying to pick on them in particular. I just want to point out it&amp;rsquo;s more secure to use email clients that work for &lt;em>any&lt;/em> email provider, not client programs that the specific email service has homebrewed even if they are free software programs. Individualized email clients and client-related programs likely have less code review and less scrutiny which means you&amp;rsquo;re less secure using them. Some good email clients are &lt;a href="https://www.thunderbird.net">Thunderbird&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Evolution_(software)">Evolution&lt;/a> or &lt;a href="http://www.mutt.org">Mutt&lt;/a> if you prefer a terminal. &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Outlook">Microsoft Outlook&lt;/a> is common, but it is proprietary. Don&amp;rsquo;t use it.&lt;/p>
&lt;h4 id="pop3">POP3&lt;/h4>
&lt;p>Since most email users have been totally spoiled by the web, they have never heard the terms POP3 and IMAP. When you use an email client, you will have a choice of which protocol you prefer. POP stands for Post Office Protocol. The first version of POP was created in 1984. POP3 fetches emails from the remote email server, then deletes them from the server. It can be configured not to do that, but that&amp;rsquo;s its main benefit. If you only check email from a single device and you don&amp;rsquo;t want your emails hanging around on someone else&amp;rsquo;s computer, then POP is the way to go. Sent emails are stored in the client you sent them. Deleted emails are only deleted in the client you deleted them in. So POP is not a good protocol if you are using multiple devices to check email. It doesn&amp;rsquo;t try to sync across devices. POP is also good to use if you have very little space allocated to you on the remote server, but you regularly send and receive large email attachments.&lt;/p>
&lt;h4 id="imap">IMAP&lt;/h4>
&lt;p>IMAP stands for Internet Messaging Access Protocol. It was created in 1986. IMAP makes use of the remote email server. All messages are stored on the remote server. When you delete an email, it is deleted on the server. When you send an email, it is stored on the server. When you read an email, the server marks it as read. If you switch devices, your email inbox will look the same. It has a consistent experience across multiple devices. This is probably what you want to use most of the time.&lt;/p>
&lt;h2 id="email-use-cases">Email Use Cases&lt;/h2>
&lt;p>Even if you follow this guide on picking an email service and you use an email client and use 2-factor authentication and inbound encrypt all your emails and use POP3, it&amp;rsquo;s likely that your correspondents are using Gmail, Outlook and Yahoo. Even though you could have the most secure email setup short of self-hosting, everyone you email is still using proprietary Javascript with no 2FA unencrypted webmail with every email being parsed and sold to advertisers and mass surveilled. My point is don&amp;rsquo;t use email for personal correspondence. The fact is email is just an old insecure protocol. It doesn&amp;rsquo;t even use end to end encryption because it comes from a different era. You can use PGP to encrypt your emails, but it has &lt;a href="https://secushare.org/PGP">so many problems&lt;/a> that I can&amp;rsquo;t recommend it for regular use. Almost no one uses it, it&amp;rsquo;s difficult to use, and has many downsides. If you have to use email for personal or business correspondence, use PGP to encrypt. But the best advice I can give is just to avoid using email.&lt;/p>
&lt;h4 id="email-privacy">Email Privacy&lt;/h4>
&lt;p>The best time to use email is when it&amp;rsquo;s required. When you&amp;rsquo;re signing up for a website that requires email for instance. You don&amp;rsquo;t have to only have 1 email account either. I use several email aliases depending on the purpose. You can use different email accounts for every service you sign up for if you want. There&amp;rsquo;s throwaway email accounts available if you need to send or receive email quickly and then ditch the account. I wouldn&amp;rsquo;t recommend using email for receiving newsletters or information that you have another way of accessing. I might make another post talking about RSS, but it&amp;rsquo;s basically a web feed. RSS readers can pull content from all the websites that support RSS that you&amp;rsquo;re interested in without you actually visiting those sites. It&amp;rsquo;s a similar experience to using an email client, but with less of a digital footprint. With email, your email server has a record of which feeds you are subscribed to. With RSS, there is no &amp;ldquo;account&amp;rdquo;. No digital footprint showing you subscribed to that feed is necessarily created. If you anonymize RSS over Tor, then even a passive adversary like your ISP will have a hard time figuring out which news feeds you read. Even if you just visit the news site directly, that&amp;rsquo;s still arguably better for your privacy in terms of minimizing your digital footprint.&lt;/p>
&lt;h4 id="multiple-accounts">Multiple Accounts&lt;/h4>
&lt;p>In summary, the most privacy-preserving way to use email is to avoid using email for anything except website sign ups. Ironic, isn&amp;rsquo;t it? I just wrote paragraphs about the best way to use email and now I&amp;rsquo;m saying that you should avoid using it for most things. If you have the will, you can use a new email account for every site you sign up for to further enhance privacy. Using an email client will make it easier to manage so many accounts at the same time. You won&amp;rsquo;t have to reenter all your passwords every time to check your emails. If you are signed up for lots of services, this could be impractical. You might consider using several email accounts for &amp;ldquo;categories&amp;rdquo; of services instead of a separate email account for every single service you sign up for. The benefit of this is you don&amp;rsquo;t have all your eggs in one basket. If one of your email accounts gets compromised or snooped on, the others remain unaffected. Also keep in mind throwaway email services for one-off sending and receiving of emails.&lt;/p>
&lt;p>If and how you segregate out your email accounts is up to you. This is just an optional extra step you can take. Using multiple email accounts doesn&amp;rsquo;t always make your emails more private or your accounts more secure. It just improves &amp;ldquo;unlinkability&amp;rdquo;. A common example of this is having a personal email and a work email. Keeping your personal life and your work life separate is important for many people. You wouldn&amp;rsquo;t want your workplace to know all the services you&amp;rsquo;re signed up for and you wouldn&amp;rsquo;t want to be receiving work emails on your personal email account.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Those are my tips for getting the most out of email. It&amp;rsquo;s a lot of information to take in, but I wanted to be thorough. My motivation for writing this post as I said in the beginning was seeing the way most people use email. Until we have a widespread protocol that supercedes email, we should at least get the most out of it. And the way most people are using email right now is the absolute worst way to use it. There&amp;rsquo;s a lot of things in computing that aren&amp;rsquo;t &lt;em>harder&lt;/em> to do a different way, it&amp;rsquo;s just that people haven&amp;rsquo;t been shown the better way of doing things. Most people don&amp;rsquo;t know anything beyond webmail despite the fact that email predates the web. I wrote this post to promote my preferred way of using email. I hope you have found it useful.&lt;/p></description></item><item><title>Use Free Software</title><link>https://0gitnick.xyz/use-free-software/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/use-free-software/</guid><description>&lt;p>In previous posts, I have mentioned a lot about free software versus proprietary software. But I have never dedicated a standalone post to free software, so I&amp;rsquo;m doing that now. While I find the history of &lt;a href="https://www.gnu.org/philosophy/free-sw.html">free software&lt;/a> fascinating, I&amp;rsquo;m not going to get into that in this post. This is more of a persuasive post. I want to convince you to use free software wherever possible &lt;em>rather than&lt;/em> &lt;a href="https://www.gnu.org/proprietary/">proprietary software&lt;/a>. There is a lot to be said on the subject. This post is about why you should use free software, not why you should code it. There &lt;em>are&lt;/em> plenty of incentives to code free software though. The reason I&amp;rsquo;m choosing to focus on the user is that there&amp;rsquo;s already so much free software out there, but it&amp;rsquo;s not getting anywhere near the usage it deserves.&lt;/p>
&lt;h2 id="what-is-freelibre-software">What is Free/Libre Software?&lt;/h2>
&lt;p>The word &amp;ldquo;free&amp;rdquo; in &amp;ldquo;free software&amp;rdquo; means free as in freedom, not free as in price. Price isn&amp;rsquo;t the issue with free software, freedom is. For software to be free, it must have &lt;strong>the 4 essential freedoms&lt;/strong>:&lt;/p>
&lt;ol start="0">
&lt;li>The freedom to run the program for any purpose.&lt;/li>
&lt;li>The freedom to study how the program works and modify it.&lt;/li>
&lt;li>The freedom to redistribute copies of the program to others.&lt;/li>
&lt;li>The freedom to distribute copies of modified versions of the program to others.&lt;/li>
&lt;/ol>
&lt;h2 id="why-does-it-matter">Why Does it Matter?&lt;/h2>
&lt;p>Why are the 4 freedoms important? The most &lt;em>relevant&lt;/em> answer I can give for software users is that it boils down to &lt;strong>social and economic control&lt;/strong>. The 4 freedoms prevent the developer of the software from wielding too much power over its users. I will start with freedom 0 and go one by one explaining how each freedom impacts the social system between developers and users.&lt;/p>
&lt;h4 id="freedom-0">Freedom 0&lt;/h4>
&lt;p>Freedom 0 ensures that the user can use the program however they wish. Without freedom 0, the developer of the software can impose rules about how the program may or may not be used. If you use the program in a way that the developer doesn&amp;rsquo;t approve of, then the developer may take legal action against you. This can be done with &lt;a href="https://en.wikipedia.org/wiki/End-user_license_agreement">EULA&lt;/a>s (End-user license agreements). Click-wrap licenses can even prevent users from knowing there are restrictions on the program&amp;rsquo;s use until after starting the installation process. Users may be prevented from publishing performance information about the program to compare it to competitors, trying to reverse engineer the program for learning, developing plugins for the program, or any number of other legitimate uses of the program. Developers telling users what they can and can&amp;rsquo;t do with programs on their own computer gives the developer tremendous control over the users. Freedom 0 prevents this by giving the user the right to do anything with the program that they are able to get it to do (within the bounds of other applicable laws).&lt;/p>
&lt;h4 id="freedom-1">Freedom 1&lt;/h4>
&lt;p>Programs are made up of &amp;ldquo;source code&amp;rdquo;. Source code is the developer-readable format of a program. Your average Joe could look at a program&amp;rsquo;s source code and it would look like gibberish. But a sufficiently skilled programmer could read the source code and make sense of the program. With compiled languages, developers cannot run a program from its source code. It has to be &lt;em>compiled&lt;/em> first. In summary, source code is the format the developer can understand the program and compiled code is the format the machine can actually run the program.&lt;/p>
&lt;p>After the program is compiled, it&amp;rsquo;s prohibitively difficult to make sense of the program even for developers. One strategy developers use to prevent other developers from reverse-engineering their program is to write the source code, then release only the compiled version of the program to the public. This way, only the developer can understand what the program really does and how it works. Not only that, but only they can make changes to the program. These programs are known as proprietary programs. It puts the developer in a position of power over the user and incentivizes the developer to add features that might hurt the user since the user is powerless to remove the bad features. This is also not conjecture. Proprietary programs &lt;em>often&lt;/em> have malicious anti-features that benefit the developer and hurt the users such as &lt;a href="https://en.wikipedia.org/wiki/Digital_rights_management">DRM&lt;/a>, surveillance, &lt;a href="https://en.wikipedia.org/wiki/Backdoor_(computing)">back doors&lt;/a>, censorship, &lt;a href="https://www.gnu.org/proprietary/proprietary-tethers.html">tethers&lt;/a> and other &lt;a href="https://www.gnu.org/proprietary/">tyrannical anti-features&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to reverse engineer a compiled program, but it&amp;rsquo;s an extremely arduous process, especially for very large programs. Free software wants &lt;em>practical&lt;/em> freedom to understand and change the program, not freedom &lt;em>in theory&lt;/em>. Therefore, for Freedom 1 to be satisfied, the source code of the program must be distributed alongside the compiled version of the program. This ensures that anyone who uses the program has the opportunity to understand and modify it. This grants users &lt;strong>individual control&lt;/strong> over the program. With Freedom 1, developers have less incentive to add malicious anti-features since other developers might notice them. This could cause people not to use programs made by that developer and for the developer to lose respect.&lt;/p>
&lt;p>Freedom 1 is necessary but incomplete. The problem is not everyone is a programmer, so not everyone has the skills to understand and modify their programs to their liking. They are still stuck with whatever the developer gives them. The freedom to study and modify the program means nothing to non-programmers. This is why we need Freedoms 2 and 3.&lt;/p>
&lt;h4 id="freedom-2">Freedom 2&lt;/h4>
&lt;p>Freedoms 2 and 3 together grant &lt;strong>collective control&lt;/strong> over the program. Freedom 2 grants the freedom to distribute exact copies of the program. If you enjoy a program, you can share it free of charge with your friends. And they can share it with their friends. Anyone who finds it useful can share it with others. If you have freedoms 0 and 1 but not 2, then you can do whatever you want with the program including studying and modifying it, but others can&amp;rsquo;t benefit because you&amp;rsquo;re not allowed to share the program. What Freedom 2 prevents is the developer having power over the users via controlling program distribution. A developer can&amp;rsquo;t do things to &lt;em>prevent&lt;/em> others from sharing the program. This means the developer is not in sole control over the distribution of the program.&lt;/p>
&lt;p>As an example, Windows 10 is a proprietary operating system. An operating system is just a program that acts as a middleman (abstraction layer) between the user and the hardware. It manages system resources. Only Microsoft is allowed to distribute the Windows 10 operating system. You may not distribute it yourself. Secondarily, in order to unlock all the features of Windows 10, you have to buy a Windows 10 license from Microsoft. Microsoft is in control of the distribution of the license keys as well. If I distributed license keys for Windows 10 to others, there could be legal ramifications for me. Microsoft punishes sharing. Freedom 2 protects sharing of software with the idea that sharing is generally a good thing and should be encouraged. Sharing software isn&amp;rsquo;t like sharing physical goods. If 5 people share a pizza, everyone gets less pizza. But if 5 people use the same program, then all 5 get the full benefit of the program. The benefit I get out of using it is not degraded by sharing it with others. Software is not like a pizza. It&amp;rsquo;s more like a pizza recipe.&lt;/p>
&lt;h4 id="freedom-3">Freedom 3&lt;/h4>
&lt;p>Continuing with the pizza analogy, Freedom 1 gives you the right to change the &amp;ldquo;recipe&amp;rdquo;. You can make improvements and benefit from them. Freedom 3 lets you share your modified recipe with others so they can also benefit from your improvements. You can imagine a situation in which Freedoms 0, 1, and 2 are granted, but not 3. This would mean users can use the program any way they wish, modify it, and share exact copies, but not share modified copies. This is disastrous for collective control over the program. It would mean only the developer could make updates. &amp;ldquo;Forks&amp;rdquo; couldn&amp;rsquo;t be public. Everyone else is free to make changes, but non-programmers can&amp;rsquo;t benefit from those changes.&lt;/p>
&lt;p>As I said before, free software is about &lt;em>practical&lt;/em> control over the program, not control &lt;em>in theory&lt;/em>. In reality, non-programmers can&amp;rsquo;t make changes they want to make to the program because they don&amp;rsquo;t know how to code. Even among programmers, one programmer might not have the expertise to modify a program to their liking or they might not be familiar with the programming language used. So unequipped developers and users rely on other developers to make the changes they desire. Without Freedom 3, only the original developer or group of developers is allowed to distribute modified versions of the program. In other words, the original developers retain a monopoly on modifications. They could charge any price for a requested feature. If they decide to stop maintaining the project, then other developers will be powerless to continue program maintenance. Freedom 3 is necessary to enable a healthy ecosystem of &lt;a href="https://en.wikipedia.org/wiki/Fork_(software_development)">forks&lt;/a> to suit the needs of each type of user.&lt;/p>
&lt;p>Since the original developer doesn&amp;rsquo;t have a monopoly on modifications with Freedom 3, other developers can improve upon the code, add features they desire, remove features they don&amp;rsquo;t desire, and collaboratively contribute to the program. This is just not possible without Freedom 3.&lt;/p>
&lt;h2 id="free-software-is-not-a-panacea">Free Software is not a Panacea&lt;/h2>
&lt;p>At the bare minimum of ethical standards for software, programs should be free software. Free software ensures that the social system around the software is just, that it doesn&amp;rsquo;t &lt;em>automatically&lt;/em> create unjust power differentials between developers and users and between developers and others developers that &lt;em>otherwise&lt;/em> wouldn&amp;rsquo;t be there. Obviously if developer A is more skilled than developer B, developer A will be better able to modify the program to their liking. And obviously if user A is wealthy and wants feature X and user B isn&amp;rsquo;t wealthy and wants feature Y, then user A can pay developers to prioritize feature X over feature Y. Free software is not free from influence by corporate interests. The Mozilla Foundation wrote Firefox to use the Google search engine because Google funds Firefox development in return. Microsoft, the proprietary software giant, is on the Linux Foundation. Linus Torvalds has been responsible for big decisions in the mainline Linux kernel for decades. Free software doesn&amp;rsquo;t even mean development of software is democratic in practice. &lt;a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life">Benevolent dictator for life&lt;/a> is the title given to free software developers that get the final say in development decisions. Since the &amp;ldquo;dictator&amp;rdquo; has the majority of development inertia behind them, any developer that might think of forking the software upon a development dispute would think twice since the inertia for the project already lies behind the dictator&amp;rsquo;s fork. Free software also doesn&amp;rsquo;t have to be user friendly. It doesn&amp;rsquo;t have to have accessibility for those that speak foreign languages or the disabled. It can even be socially harmful and still qualify as free software. Some free software may require expensive hardware that only the wealthy can afford. Accessibility is limited to the rich in that case. Free software doesn&amp;rsquo;t solve everything.&lt;/p>
&lt;h2 id="still-use-it">Still, Use It&lt;/h2>
&lt;p>Free software does not solve the problems I mentioned and it&amp;rsquo;s not meant to. The problems I described can possibly be avoided, with great care. With proprietary software, they are downright unavoidable. Proprietary software &lt;em>automatically&lt;/em> sets up an unjust social system around software. It&amp;rsquo;s a non-starter. Doomed before it even starts. There is no way to create proprietary software and have it be as ethical as free software because it doesn&amp;rsquo;t meet the basic requirements for a just social and economic system. It &lt;em>discourages&lt;/em> understanding, sharing, and collaboration. It&amp;rsquo;s no good. If you use proprietary software often, it becomes a habit. And when it becomes a habit, the developer of the software gains influence over you because they control the software you rely on.&lt;/p>
&lt;p>Developers of proprietary software have a &lt;em>monetary incentive&lt;/em> to mistreat their users. Anti-features can be very profitable. They have no reason not to add anti-features since others can&amp;rsquo;t understand the compiled code and won&amp;rsquo;t necessarily even know about the anti-features and couldn&amp;rsquo;t do anything about them even if they did because they&amp;rsquo;re not allowed to modify the program. Proprietary programs are instruments of unjust control over the users. Proprietary software should not exist. It should all be eradicated and replaced with free software instead. You shouldn&amp;rsquo;t tolerate it if you can at all help it. The best way you can help with the liberation of cyberspace is by switching to using as much free software as possible instead of the proprietary software you might currently be using. Free software is how we stay in control of our own computing. Without it, our devices will cease to be our own. The code we run on our devices will be under the control of developers with incentives to do us harm. We want the developers writing our software to have incentives to write software that only benefits us. If we refuse to use proprietary software and use free software instead, developers will see they can&amp;rsquo;t get away with not giving users their freedoms.&lt;/p>
&lt;p>In the future I envision, developers will lose all incentive to write proprietary software knowing in advance no one will use it. It won&amp;rsquo;t even cross their minds as a possibility. Right now, getting people to switch to free software is a struggle. Many proprietary programs benefit heavily from the &lt;a href="https://en.wikipedia.org/wiki/Network_effect">network effect&lt;/a>, keeping many people dependent. Free software is not even a well known social issue, &lt;em>yet&lt;/em>. But with enough awareness and with enough people using free software, the network effect will work in favor of a liberated cyberspace, not a divided, controlled, proprietary one. Computers become more integral to our way of life every day. Our devices have become extensions of ourselves. This is why it&amp;rsquo;s critical that they at least run free software. That&amp;rsquo;s the only way we can hope to trust them. Use as much free software as you can and spread the word to others. We need to take back our computing.&lt;/p></description></item><item><title>SIUe Unauthenticated SMTP Server</title><link>https://0gitnick.xyz/siue-unauthenticated-smtp-server/</link><pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/siue-unauthenticated-smtp-server/</guid><description>&lt;h2 id="email-server">Email Server&lt;/h2>
&lt;p>During my last semester at &lt;a href="https://siue.edu">SIUe&lt;/a>, one of my professors demonstrated spoofing an email using an unauthenticated SMTP server (smtp.siue.edu) on the university network. I believe the server is still present on the network despite being reported multiple times to IT. It isn&amp;rsquo;t accessible on the public internet, only through the university&amp;rsquo;s network that all students have easy access to. Non-students could also gain access to the network fairly easily while at the university and therefore have access to the email server.&lt;/p>
&lt;p>The email server has no authentication whatsoever. You don&amp;rsquo;t have to offer any credentials to send emails. You can&amp;rsquo;t read others' emails, however. This means you don&amp;rsquo;t even need to be a student to send emails. As a non-student, you can access the email server through Telnet and send emails as any student, professor, faculty or staff member. With that, you can send out emails to any email lists. This unauthenticated server has been present on the network for years according to other students I have talked to.&lt;/p>
&lt;p>I hope the server gets taken off the network, but this underscores a larger issue. American colleges and universities are institutions with some of the weakest cybersecurity where you would expect better. This makes them easy targets for hackers. The reason is they don&amp;rsquo;t have strong incentives to do better. Unless having poor cybersecurity is going to lose money, business as usual will continue and unauthenticated email servers will stay online.&lt;/p></description></item><item><title>Back Up Your Data</title><link>https://0gitnick.xyz/back-up-your-data/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/back-up-your-data/</guid><description>&lt;h2 id="losing-my-data">Losing My Data&lt;/h2>
&lt;p>My motivation for writing this post is I accidentally deleted another unpublished post I put a lot of effort into. It probably had 6+ hours of work invested in it at least. And now, it&amp;rsquo;s gone forever. Perhaps it&amp;rsquo;s best put into the 5 stages of grief. At first, I denied it. I was sure I had it copied to my clipboard, saved in my text editor cache or history, but it wasn&amp;rsquo;t. After that, I got angry that I could have accidentally deleted something I put so much work into. How could I make such a dumb mistake? I skipped bargaining. I was sad about it for a while. Then I reached acceptance, and decided to write this post instead.&lt;/p>
&lt;p>This post is a public service announcement about backups inspired by the one that got lost. I&amp;rsquo;ve had my own backups for over 5 years, and never have I lost any data from those backups. So I have a little bit of experience making backups. The following advice is meant for individuals, not a corporate or business setting.&lt;/p>
&lt;h2 id="why-to-backup">Why to Backup?&lt;/h2>
&lt;p>Backups are important because hard drives fail and get corrupted, phones break and get lost, and physical media degrade. Backups can help protect your important data.&lt;/p>
&lt;h2 id="what-to-backup">What to Backup?&lt;/h2>
&lt;p>How do you know which data should go into your backups? Here are two quick rules of thumb:&lt;/p>
&lt;ol>
&lt;li>You would want the data back if you lost it or it corrupted (&lt;em>it&amp;rsquo;s worth something to you&lt;/em>)&lt;/li>
&lt;li>Using a backup would take less time than recreating the data yourself (&lt;em>it&amp;rsquo;s worth the trouble to back up&lt;/em>)&lt;/li>
&lt;/ol>
&lt;p>I&amp;rsquo;ll use this blog as an example. It uses the Hugo software to generate the site pages. I can &lt;a href="https://gohugo.io/getting-started/installing/">install Hugo&lt;/a> on any platform with a few simple commands. The cost of retrieving Hugo is &lt;em>very&lt;/em> low. If I lost it, I could recreate it by just reinstalling. I would get the latest version and it would work on whatever platform I happen to be using. If I made a standard backup, I would be stuck with the same version and the way it is packaged may not work across platforms. So, making a backup of Hugo would break rule #2 because it would take &lt;em>more time&lt;/em> to recover it from a backup than just reinstalling it.&lt;/p>
&lt;p>I could almost say the same about the template I&amp;rsquo;m using. Except I&amp;rsquo;ve made modifications to it to not include Goo-lag analytics and other things. I have it backed up because &lt;strong>#1&lt;/strong> I would need it back if I lost it and &lt;strong>#2&lt;/strong> making those modifications again would take longer than just restoring the template from a backup. The same goes for my site content. Rewriting it all would be a huge effort. As I write more posts, the effort only increases. So, obviously, I back up my site content because it satisfies rules #1 and #2.&lt;/p>
&lt;p>For most people, data that satisfies both of these rules are going to be old home videos, vacation pictures, resumés, portfolios, financial records, contact lists and password manager files. Those are generally data that are valuable and either can&amp;rsquo;t be recreated or would be cumbersome to recreate.&lt;/p>
&lt;h2 id="when-to-backup">When to Backup?&lt;/h2>
&lt;p>If you don&amp;rsquo;t already have a backup, create one right now. Don&amp;rsquo;t wait. Your data could become corrupted at any time. If you don&amp;rsquo;t have copies of it elsewhere, then you&amp;rsquo;re just waiting for the inevitable to happen. Your digital media (hard drive, flash drive, SD card, CD/DVD) will eventually fail and you will lose your important data.&lt;/p>
&lt;p>Once you have your data backed up for the first time, you will need to create a backup schedule. A backup schedule is how often you want to back up your data. It can be weekly, monthly, yearly, etc. It doesn&amp;rsquo;t have to be at regular intervals, but that&amp;rsquo;s good practice. This decision should be based on how frequently you acquire important data and how important the new data is. If you record your daughter or son&amp;rsquo;s first steps on video, you will want to back that up the same day or week probably. If you don&amp;rsquo;t acquire important data often, you may want a yearly backup schedule.&lt;/p>
&lt;p>In my case, I have a blog. So far, I have averaged 2-3 posts per month. I put a lot of thought into my posts. Since losing just 1 post motivated me to write all of this, I don&amp;rsquo;t want to even think about losing 2-3 posts at once. Therefore I should, at minimum, perform monthly backups so that I never lose more than 2-3 posts. Redundant copies of my posts are stored on web servers and Zeronet, but those are only posts that I have deemed worthy to publish. The ones I haven&amp;rsquo;t published don&amp;rsquo;t have redundant copies, so I should still perform monthly backups. That&amp;rsquo;s an example of how to think about a backup schedule. It will be different for everyone since everyone has different backup needs.&lt;/p>
&lt;h2 id="where-to-backup">Where to Backup?&lt;/h2>
&lt;p>Where you back up your data is crucial. This gets into what is widely known as the 3-2-1 rule of data backups. You need 3 copies of your data, 2 types of storage media, and 1 offsite copy. You &lt;strong>must&lt;/strong> have an offsite copy in case of a disaster. If a fire breaks out in your home and you&amp;rsquo;re gone, it will destroy your computer &lt;em>and&lt;/em> your external drive. So it&amp;rsquo;s no good to only have data stored locally. Yes, you need local copies, but you must have a remote copy as well.&lt;/p>
&lt;p>Also, having 2 copies of your data on the same media does not count as 2 copies. It counts as 1 copy. One computer science student I talked to in the past did not understand that &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/RAID">RAID&lt;/a> is not a backup&lt;/strong>. One power spike and all your drives in your RAID system can fail simultaneously. It could get stolen. Do you trust yourself to never delete anything important by accident? You need &lt;em>physically&lt;/em> separate media for backups, not just &lt;em>logically&lt;/em> separate. This reduces the chance you will delete important data without catching the error first. Physically separate drives don&amp;rsquo;t count if they are connected to the same system. For example, it doesn&amp;rsquo;t matter if you have copies of your data on multiple cloud instances if those instances are through the same cloud provider. What if that cloud provider gets compromised and you lose both backups? So, use separate systems as well as separate drives.&lt;/p>
&lt;p>And finally, you need at least one air-gapped backup. If all your accounts and machines get compromised, you need a way to recover your data. Without that, your data could be stolen and held for ransom. To avoid this scenario, set up an offline backup in a different city, state, or country. The farther, the better. Your offline backup will probably be local since you can&amp;rsquo;t access it remotely. Having a remote offline backup is inconvenient because it will be hard to maintain a frequent backup schedule. You could keep your offline backup as a micro SD card stashed between your phone and its case, or in your purse so it&amp;rsquo;s always with you. This way, your offline backup, local backup, and remote backup are in 3 physically separate locations.&lt;/p>
&lt;h2 id="who-to-backup">Who to Backup?&lt;/h2>
&lt;p>It&amp;rsquo;s important to know who is in control of the computer your backup is sitting on. If you use a cloud service provider to back up your data remotely, there are significant caveats. The caveats apply any time you are using hardware that is not under your control.&lt;/p>
&lt;p>For one, you have to trust the cloud service&amp;rsquo;s security practices. If they get compromised, your data will be at risk. Are you willing to accept that risk? What if their database gets compromised? To eliminate this risk, you should &lt;strong>always&lt;/strong> encrypt your data before uploading it. I&amp;rsquo;ll get to this topic in the next section.&lt;/p>
&lt;p>Another risk is that the data is modified either intentionally or by error. Encrypting the data will not prevent it from being modified maliciously. For that, you need authenticated encryption. Also, you may be limited on monthly bandwidth or file storage capacity. If you store a lot of data, that could quickly become expensive.&lt;/p>
&lt;p>Using a cloud service provider, you can only access your data at their leasure. Hopefully their system has good uptime. This usually isn&amp;rsquo;t a big problem. But they will also have full control over how you access your data. They might only allow you to access it over a web portal. You&amp;rsquo;ll want to make sure they run a service you can access using only free software such as &lt;a href="https://nextcloud.com/">Nextcloud&lt;/a> or &lt;a href="https://www.etesync.com/">Etesync&lt;/a>. Preferably, they give you many ways to access it so you aren&amp;rsquo;t locked in to a particular client program.&lt;/p>
&lt;h2 id="how-to-backup">How to Backup?&lt;/h2>
&lt;p>Now that I&amp;rsquo;ve covered the 5 W&amp;rsquo;s (why, what, when, where, who), I&amp;rsquo;ll cover the most important aspect of backups: How to do them. There is an endless list of software that can help with backups. One good rule is you should &lt;em>always&lt;/em> use &lt;a href="https://www.fsf.org/about/what-is-free-software">free software&lt;/a> for your backups. &lt;em>Never&lt;/em> use &lt;a href="https://www.gnu.org/proprietary/">proprietary software&lt;/a> for any part of the backup process. There&amp;rsquo;s no reason for it and it will compromise your backup security.&lt;/p>
&lt;h4 id="offsite-backup">Offsite Backup&lt;/h4>
&lt;p>The first part of the backup process is to decide which data you want to store. Then, you should decide how you want to handle the remote backup. If you use a VPS, you control &lt;em>how&lt;/em> you access your data, but all other caveats still apply. On a VPS, you can host your own service for the remote backup. As I said, there are a thousand ways to do this depending on your needs. If you like to keep it barebones, you can run a simple ssh server. If you are hosting a backup for more than just yourself, you may want to use an actual backup platform such as Nextcloud. There are several OS&amp;rsquo;s that are built for the express purpose of backups from &lt;a href="https://www.freenas.org/">FreeNAS&lt;/a> to &lt;a href="https://www.openmediavault.org/">OpenMediaVault&lt;/a>. It doesn&amp;rsquo;t really matter which you choose as long as it&amp;rsquo;s meets your needs and runs free software.&lt;/p>
&lt;h4 id="encryption">Encryption&lt;/h4>
&lt;p>Once you have your offsite service set up, it&amp;rsquo;s time to perform the backup. The first thing you&amp;rsquo;ll want to do before anything else is &lt;strong>encrypt your data&lt;/strong>. For most people, you&amp;rsquo;ll want to use &lt;a href="https://www.veracrypt.fr">Veracrypt&lt;/a>. It&amp;rsquo;s user friendly and cross-platform. For a guide on how to use Veracrypt, follow the &lt;a href="https://www.veracrypt.fr/en/Beginner%27s%20Tutorial.html">beginner&amp;rsquo;s tutorial&lt;/a>. Other encryption programs require using the command-line, decrypting the data to disk before reading it, or only work on GNU/Linux. For those reasons I won&amp;rsquo;t use them in this tutorial. However, if you feel comfortable using LUKS or GPG, go ahead. Just know the trade-offs.&lt;/p>
&lt;p>This next step is optional, but I recommend it. Veracrypt does not perform authenticated encryption. Your data is still encrypted, but it could be maliciously changed by an attacker and Veracrypt won&amp;rsquo;t know about it. The best way to prevent this is with an HMAC. On GNU/Linux, you can do this with a single command as long as you have openssl installed. It doesn&amp;rsquo;t seem as easy to perform on other platforms. For your HMAC password, you can reuse your Veracrypt volume password. Copy the resulting HMAC value, then save it to a text file next to your Veracrypt container file. It should also go into your backups. When you retrieve your backups later, you can perform the HMAC operation on the downloaded container file checking that the result matches the value you saved before. This provides you file integrity. At this point, I recommend deleting unencrypted copies of your data on disk since there&amp;rsquo;s no good reason to have them around.&lt;/p>
&lt;h4 id="finishing-up">Finishing Up&lt;/h4>
&lt;p>Now your data is finally ready to go into storage. Upload the Veracrypt container file along with the HMAC text file to your remote backup system. Then copy your data onto external media such as a USB flash drive, external hard drive, or SD card. This will serve as your offline backup. You can store your third backup on the same computer you use to access and modify the data, or you can choose a different one so it&amp;rsquo;s not taking up space. That&amp;rsquo;s up to you. Just be sure to have at least 3 copies of your data, one of them at a remote location and one of them air-gapped. You could write a script to do the backups and check the HMAC for you.&lt;/p>
&lt;p>Finally, you&amp;rsquo;ll want to decide on your backup schedule. To add to your backup, you can simply mount your Veracrypt container and add more files. If you ever run out of space, you can always create a larger container and transfer all your data there. I hope you found this guide useful. I didn&amp;rsquo;t go into as much detail as I could have about remote backup solutions, but I think I covered what needed to be covered.&lt;/p>
&lt;p>If you&amp;rsquo;ve made it this far, thank you for reading. If you find my ideas valuable, then please consider making a donation. Details are on my &lt;a href="../../about#donate">about page&lt;/a>.&lt;/p></description></item><item><title>SIUe e-ID Creation and Maintenance Problems</title><link>https://0gitnick.xyz/siue-e-id-creation-and-maintenance-problems/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/siue-e-id-creation-and-maintenance-problems/</guid><description>&lt;h1 id="arbitrary-password-rules">Arbitrary Password Rules&lt;/h1>
&lt;p>I&amp;rsquo;ll go over them one at a time. They are found at &lt;a href="https://eid.siue.edu/am/change_password">https://eid.siue.edu/am/change_password&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The previous 6 passwords cannot be reused.&lt;br>
I don&amp;rsquo;t have much to say about this one. It only reduces the password space by 6, so it doesn&amp;rsquo;t make brute-forcing easier.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A password must contain at least seven characters (letters or numbers) but no more than eight characters.&lt;br>
&lt;em>&lt;strong>Cringe!&lt;/strong>&lt;/em> The &lt;a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf">2017 NIST guidelines&lt;/a> say passwords &lt;em>must&lt;/em> be at least 8 characters. SIUe seems to have gotten this advice backwards with a &lt;em>maximum&lt;/em> of 8 character passwords.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A password must contain at least five unique characters.&lt;br>
This goes against the 2017 NIST guideline against imposing composition rules for passwords. It also reduces the already small password space.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A password must contain at least one letter (A-Z or a-z) and at least one number (0-9).&lt;br>
Again imposing an arbitrary composition rule that reduces the password space.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A password must start with a letter or a number.&lt;br>
Do I even need to say it a third time?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A password cannot contain any of the characters $&amp;amp;@=+&amp;quot;/[]:;|*,?&amp;lt;&amp;gt;~' or a space.&lt;br>
Throw out the NIST guideline on using all printable ASCII characters and unicode. In fact, it doesn&amp;rsquo;t support unicode. I tried inserting a unicode character only to get errors. From a security perspective, this rule is extremely concerning. I&amp;rsquo;m not sure what it&amp;rsquo;s trying to do, but some of the characters are used in SQL commands. Could this indicate a &lt;a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection&lt;/a> vulnerability? Since SIUe has to update the password across multiple systems (Blackboard, Outlook, etc.), it could be due to a compatibility issue. This could also be a security concern.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m going to lump the last 4 together because the only thing I have to add is that they reduce the password space again and are composition rules.&lt;/p>
&lt;ul>
&lt;li>A password cannot be a person&amp;rsquo;s name, an e-ID or any word found in the dictionary.&lt;/li>
&lt;li>A password cannot be any of the following spelled backwards: a person&amp;rsquo;s name, an e-ID or any word found in the dictionary.&lt;/li>
&lt;li>A password cannot have a repeating pattern (e.g. ababab or abcdefg).&lt;/li>
&lt;li>A password cannot have a pattern like &amp;lsquo;ccNNNNNc&amp;rsquo; where &amp;lsquo;c&amp;rsquo; represents any character and &amp;lsquo;N&amp;rsquo; represents any number. (These are National Insurance numbers and are widely known on the web.)&lt;/li>
&lt;/ul>
&lt;h2 id="60-day-reset">60 Day Reset&lt;/h2>
&lt;p>Every 60 days, you are required to &lt;a href="https://www.siue.edu/its/eid_faq.shtml#expired">reset your password&lt;/a>. The NIST password policy guidelines say users shouldn&amp;rsquo;t be required to change their passwords regularly or arbitrarily. If an account is compromised, then it makes sense. But otherwise, you&amp;rsquo;ll just be making everyone increment the last digit in their password every time. Almost no one will create a completely different password when they can just change one character.&lt;/p>
&lt;p>Furthermore, all these password rules make it much more difficult to analyze the number of possible passwords. To do that, you would need every e-ID and every word in &amp;ldquo;the dictionary&amp;rdquo;. Who knows what words are included even. I&amp;rsquo;m certain that even the administrators have no idea how big the password space is, but it&amp;rsquo;s definitely insufficient. This brings me to my next point.&lt;/p>
&lt;h1 id="autogenerated-password-patterns">Autogenerated Password Patterns&lt;/h1>
&lt;p>If your password is reset using your security question, or you get your password generated for you at the helpdesk, there seems to be patterns to the passwords. I&amp;rsquo;ve noticed after testing this out by resetting my password that the generator always seems to prefer 2 digits and 6 letters. The generator seems to prefer 3 letter sequences with a consonant followed by a vowel followed by another consonant. This makes it easy to pronounce. It always uses lowercase. I don&amp;rsquo;t think I have ever seen it use uppercase. This is why I do &lt;em>&lt;strong>not&lt;/strong>&lt;/em> recommend using passwords autogenerated by SIUe. They have patterns. If you obtain an autogenerated password, change it as soon as possible. Since the generator algorithm is closed off, there&amp;rsquo;s no way to know how secure it is. Your best bet is to generate a password yourself using a password manager and memorize that.&lt;/p>
&lt;h1 id="annoying-ui">Annoying UI&lt;/h1>
&lt;h2 id="looks">Looks&lt;/h2>
&lt;p>Take a look at the &lt;a href="https://eid.siue.edu/am/e-ID">creation and maintenance page&lt;/a>. I myself am not great at designing graphical user interfaces, but this one is bad. There was a class I had where the professor went over how awful the creation and maintenance page was &lt;em>during&lt;/em> the class, but I won&amp;rsquo;t mention who. Some things they noticed on the face of it: For some strange reason, the table has four columns, but the third and fourth column only have one item. The radio buttons get their own separate cells which look awful with the borders. Everything is at the top of the page, not centered. The gray background is very bland and it looks like not much thought was put into the color scheme. And it definitely isn&amp;rsquo;t going to look nice on mobile.&lt;/p>
&lt;h2 id="input-ambiguity">Input Ambiguity&lt;/h2>
&lt;p>The date of birth on the &amp;ldquo;I want to get an e-ID&amp;rdquo; option and the &amp;ldquo;I have an e-ID but I forgot my password&amp;rdquo; option have 3 separate input boxes! The day and month are dropdowns while the year is a text box. It doesn&amp;rsquo;t indicate how you should enter the year either, as 2 digits or 4 digits. It wants 4. But, if you enter 2, it gives you a generic error message saying the account information is not correct.&lt;/p>
&lt;p>The new password and confirm new password fields on the &lt;a href="https://eid.siue.edu/am/change_password">change password page&lt;/a> allow you to input in your browser 9 characters, but the server just rejects anything more than 8. It also has text above the input field saying it only allows 8 characters.&lt;/p>
&lt;h2 id="invalid-html">Invalid HTML&lt;/h2>
&lt;p>After seeing the poor quality of the subdomain&amp;rsquo;s webpages, I got curious and clicked view source. They were using XHTML 1.0 and the legacy windows-1252 character encoding. After checking all the pages reachable from the radio buttons with the HTML validator at &lt;a href="https://validator.w3.org/">https://validator.w3.org/&lt;/a>, the results were as expected. Every URL I checked had invalid HTML at the time of this writing:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://eid.siue.edu/am/e-ID">https://eid.siue.edu/am/e-ID&lt;/a> (85 errors)&lt;/li>
&lt;li>&lt;a href="https://eid.siue.edu/am/get_e-ID">https://eid.siue.edu/am/get_e-ID&lt;/a> (16 errors)&lt;/li>
&lt;li>&lt;a href="https://eid.siue.edu/am/reset.pl">https://eid.siue.edu/am/reset.pl&lt;/a> (19 errors)&lt;/li>
&lt;li>&lt;a href="https://eid.siue.edu/am/change_password">https://eid.siue.edu/am/change_password&lt;/a> (91 errors, 2 warnings)&lt;/li>
&lt;li>&lt;a href="https://eid.siue.edu/am/bid_lookup">https://eid.siue.edu/am/bid_lookup&lt;/a> (14 errors)&lt;/li>
&lt;/ul>
&lt;p>The landing page for the university at &lt;a href="https://www.siue.edu">https://www.siue.edu&lt;/a> also had invalid HTML yielding 13 errors from the validator. Other URLs under the SIUe domain also had errors. These errors are less severe than the creation and maintenance page but still deserve to be addressed. The HTML looks like it was written in an editor, not by a human.&lt;/p>
&lt;h2 id="usability">Usability&lt;/h2>
&lt;p>After you submit the &lt;a href="https://eid.siue.edu/am/change_password">change password form&lt;/a>, you are redirected to a webpage where you have the option to change your secret phrase. You can use the secret phrase to reset your password if you forget it. The problem is the secret phrase works the opposite way than you think it does. You don&amp;rsquo;t select a question and input the answer. You input both the question and answer manually. And then when you go to reset your password, it will give you the answer to the secret phrase and you have to come up with the question. If you think about it for a while, it&amp;rsquo;s not hard to see that some answers correspond to really only one question. So this is not a good scheme.&lt;/p>
&lt;p>For example, &amp;ldquo;The Incredibles&amp;rdquo; is the hint. You can guess the question &amp;ldquo;What is your favorite movie?&amp;rdquo;. On the other hand, picking a question from a dropdown box and having a normal security question challenge setup would be a better scheme. If a student isn&amp;rsquo;t aware of how the system works, it might leak sensitive information about them to hackers, especially since they can define their own question &lt;em>and&lt;/em> answer.&lt;/p>
&lt;h1 id="data-stored-in-plaintext">Data Stored in Plaintext&lt;/h1>
&lt;p>When it lets you change the secret phrase and answer, it literally shows you the existing secret phrase and answer. That means that the question to your secret phrase is not hashed and salted. SIUe has a big database of questions of ~13k active students. And don&amp;rsquo;t forget all past students' questions and answers going back years are still in the system. And their answers to those questions are just sitting on a server somewhere ready for a data breach. This is pure negligence and should be fixed as soon as possible. There&amp;rsquo;s no reason to have personal questions and answers of students sitting on a server somewhere in plain text.&lt;/p>
&lt;h1 id="denial-of-service-vulnerability">Denial of Service Vulnerability&lt;/h1>
&lt;p>There is a denial of service vulnerability related to the &lt;a href="https://eid.siue.edu/am/change_password">change password form&lt;/a>. If you unsuccessfully reset your password more than 5 times, your ability to reset your password will be locked for 24 hours. This password reset attempt limit persists across browsing sessions and IP addresses. It must be stored on SIUe servers. That means anyone can use the &lt;a href="https://0gitnick.xyz/siue-cyberstalking-feature/">people search feature&lt;/a>, which I covered previously, to scrape for e-ID&amp;rsquo;s. Then, they can spam the password reset form with every e-ID scraped from the search feature. Since it&amp;rsquo;s only necessary to do this once every 24 hours per account, anyone can effectively break the password reset feature for all active students, faculty and staff with a simple Python script.&lt;/p>
&lt;p>Of course, students can make a call to the helpdesk to get the password reset limit fixed so they have 5 more attempts within the 24 hours. But it&amp;rsquo;s possible to run this attack continuously with such high volume that even students who call the helpdesk and get a reset on the attempts cannot change their password. I&amp;rsquo;m not encouraging or condoning denial of servicing the change password feature. I&amp;rsquo;m only pointing the attack vector exists in the hope that it gets fixed.&lt;/p></description></item><item><title>Exposing Zoom</title><link>https://0gitnick.xyz/exposing-zoom/</link><pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/exposing-zoom/</guid><description>&lt;h1 id="foreword">Foreword&lt;/h1>
&lt;p>I often feel like my posts can come off as preachy. So this post is going to be a different than usual. This time, I want to include more facts. This post is for the people that don&amp;rsquo;t necessarily share my opinion that all software should be free (as in freedom). My hope is that this will speak to a wider audience.&lt;/p>
&lt;h1 id="scale-and-growth">Scale and Growth&lt;/h1>
&lt;p>To start off, I want to give you an idea of the scale of Zoom. Zoom is a video and audio conferencing platform for desktop and mobile devices. According to &lt;a href="https://blog.zoom.us/wordpress/2020/04/22/90-day-security-plan-progress-report-april-22/">Zoom&amp;rsquo;s blog&lt;/a> from 22 April 2020, Zoom CEO Eric S. Yuan said in a webinar that Zoom has surpassed 300 million daily Zoom meeting participants. This does not mean that Zoom has 300 million active daily users, but 300 million participants in Zoom calls daily. For example, one user may participate in several Zoom meetings and be double-counted. So the 300 million does not correspond to the number of users. Nonetheless, 300 million is no small number. For comparison, the U.S. population is estimated to be &lt;a href="https://www.census.gov/popclock/">about 329 million&lt;/a> during the time of this writing.&lt;/p>
&lt;p>But Zoom didn&amp;rsquo;t always have such a huge user base. The Coronavirus pandemic causing people to work from home is what skyrocketed their numbers. According to Zoom&amp;rsquo;s Blog post, &amp;ldquo;Usage of Zoom has ballooned overnight - far surpassing what we expected when we first announced our desire to help in late February. This includes over 90,000 schools across 20 countries that have taken us up on our offer to help children continue their education remotely. To put this growth in context, as of the end of December last year, the maximum number of daily meeting participants, both free and paid, conducted on Zoom was approximately 10 million. In March this year, we reached more than 200 million daily meeting participants, both free and paid. We have been working around the clock to ensure that all of our users new and old, large and small can stay in touch and operational&amp;hellip;our platform was built primarily for enterprise customers large institutions with full IT support. These range from the world’s largest financial services companies to leading telecommunications providers, government agencies, universities, healthcare organizations, and telemedicine practices&amp;rdquo;. Eric S. Yuan. (2020, April 1). Retrieved May 24, 2020 from Zoom, Zoom blog, &lt;a href="https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/">https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/&lt;/a>.&lt;/p>
&lt;h1 id="terms-of-service">Terms of Service&lt;/h1>
&lt;p>&amp;ldquo;ACCESSING THE ZOOM WEBSITE OR BY UTILIZING THE ZOOM SERVICES YOU AGREE TO BE BOUND BY THESE TERMS OF SERVICE AND ALL EXHIBITS, ORDER FORMS, AND INCORPORATED POLICIES&amp;rdquo; &lt;em>Terms of Service&lt;/em>. (2020, April 13). Retrieved May 23, 2020 from Zoom, Zoom terms of service website, &lt;a href="https://zoom.us/terms">https://zoom.us/terms&lt;/a>. This means that even using the Zoom website or web app instantly binds you to the terms of service of Zoom whether you know about it or not. Section 2d.i states that you are prohibited from reverse engineering Zoom services. Since Zoom is proprietary, you can&amp;rsquo;t investigate the source code to figure out what it&amp;rsquo;s doing. Worse than that, the terms of services denies you to even try to figure out how Zoom works or what it does behind the scenes or help anyone else do so. This means that independent security audits of Zoom software are not possible unless Zoom gives up their source code. Therefore, any of the claims Zoom makes about security, encryption, data protection or privacy are impossible to verify without breaking the law. You just have to take their word on it.&lt;/p>
&lt;p>According to section 2d.iv, you may not transmit materials that infringe intellectual property. This means if you have music playing in the background of a Zoom call or a movie playing on your television on in the background, you could be breaking Zoom&amp;rsquo;s terms of service without even trying. Section 2d.vi says you cannot &amp;ldquo;use the Services to communicate any message or material that is harassing, libelous, threatening, obscene, indecent, would violate the intellectual property rights of any party or is otherwise unlawful, that would give rise to civil liability, or that constitutes or encourages conduct that could constitute a criminal offense, under any applicable law or regulation&amp;rdquo; &lt;em>Terms of Service&lt;/em>. (2020, April 13). Retrieved May 23, 2020 from Zoom, Zoom terms of service website, &lt;a href="https://zoom.us/terms">https://zoom.us/terms&lt;/a>. I&amp;rsquo;m not a lawyer so I can&amp;rsquo;t interpret this, but the language seems to place broad restrictions on what you are allowed to say over Zoom. Section 15 also says you cannot use Zoom while in a &amp;ldquo;high-risk&amp;rdquo; environment.&lt;/p>
&lt;p>In section 7d, the terms say that Zoom &amp;ldquo;content&amp;rdquo; can be turned over to law enforcement. Section 2b seems to define content as anything that is transmitted from you to Zoom. For example, audio, video, text messages, etc. including metadata is all accessible to law enforcement at any time.&lt;/p>
&lt;h1 id="privacy-policy">Privacy Policy&lt;/h1>
&lt;p>The &lt;a href="https://zoom.us/privacy">privacy policy&lt;/a> is always where it gets interesting for tech behemoths. So let&amp;rsquo;s dive in. Here is a list of data Zoom collects: account owner name, billing name, address, payment method, phone number, language, password, title, department, cloud recordings, instant messages, files, whiteboards, voice mails, and &amp;ldquo;other information shared while using the service&amp;rdquo;. This is mostly data that you explicitly give to Zoom. Let&amp;rsquo;s look at the technical data that you may not even know you are giving Zoom: IP address (who you are online), MAC address (unique to your device), &amp;ldquo;other device ID&amp;rdquo;, device type, operating system type and version, client version, type of camera, microphone or speakers, connection type, the nearest city you are in, whether you use VoIP, mobile or desktop client, whether you join with video on or off, if your meeting has a password or waiting room or allows screen sharing, how long the meeting was, your email or other identifying information, join and leave time, name of the meeting, date and time of the meeting, chat status, and call data records. For a service that claims to protect user privacy and not sell data to advertisers, that&amp;rsquo;s a lot of non-essential data being collected.&lt;/p>
&lt;h2 id="recordings">Recordings&lt;/h2>
&lt;p>The recordings section is explaining that anyone in a Zoom call can record a meeting on their local device and save it and that Zoom acknowledges they have no control over this. Despite this, Zoom Phone makes it easier for customers to record calls. &amp;ldquo;Zoom Phone allows customers to record phone calls, receive voice mail recordings, and obtain transcripts of voicemail, all which may contain personal information and also be stored in our cloud&amp;rdquo;. &lt;em>Privacy Policy&lt;/em>. (2020, March 29). Retrieved May 23, 2020 from Zoom, Zoom privacy policy website, &lt;a href="https://zoom.us/privacy">https://zoom.us/privacy&lt;/a>. Creating the transcripts happens automatically which means that the audio data of a call is fed into some automated system which has to listen to the call to create the transcript.&lt;/p>
&lt;h2 id="attention-tracking">Attention Tracking&lt;/h2>
&lt;p>The section on attention tracking in the Privacy Policy explains that if the host of the meeting is sharing their screen, they can activate a feature called &amp;ldquo;attention tracking&amp;rdquo;. This means the host can see whether or not the participants have the Zoom window open or are doing something else. This gives whoever the host might be (employers, teachers, etc.) power to invade the participants' computers (employees, students, etc.) to check if they are paying attention or not. Zoom does not give participants any kind of forewarning that what they are doing on their own computers is being monitored and sent to the host other than it being buried in the Privacy Policy which, let&amp;rsquo;s be real, nobody reads. And even if people did read it, they still are not in a position to understand the significance of some of the data collected on them like IP address, MAC address, etc.&lt;/p>
&lt;p>It&amp;rsquo;s peculiar how Zoom website obviously tries to give the overwhelming impression that you can trust the software, yet it&amp;rsquo;s against their terms of service to reverse engineer it and their own privacy policy shows they collect enormous amounts of data that isn&amp;rsquo;t strictly necessary or relevant to video conferencing. Do they really need your MAC address or know which OS you&amp;rsquo;re using? But not only does Zoom obtain data when you are using Zoom. They obtain data from you even when you are not using their service.&lt;/p>
&lt;p>Their own privacy policy says they collect data about you from Google Analytics and Google Ads. Google analytics can run in your browser as Javascript that watches what you do and collects data on you as you browse the web. If you don&amp;rsquo;t know how to block Javascript, Google Analytics could be watching you in the background on any website without you even knowing it&amp;rsquo;s there. Zoom also collects data from &amp;ldquo;Data Enrichment Services&amp;rdquo;, and public sources. This could be just about anything from your social media accounts to arrest records. One way this is done is through tracking cookies.&lt;/p>
&lt;h1 id="cookies-policy">Cookies Policy&lt;/h1>
&lt;p>On the &lt;a href="https://zoom.us/cookie-policy">Cookie Policy page&lt;/a>, it starts off explaining how cookies work. Essentially, cookies are any data a site can store in the browser. They can persist across browsing sessions and unfortunately they are used to track you across the web. I want to pay special attention on the Cookie Policy page to the analytics subtype under functional cookies. &amp;ldquo;Zoom uses cookies and other identifiers to gather usage and performance data&amp;hellip;This includes cookies from Zoom and from third-party analytics providers&amp;rdquo;. &lt;em>Cookie Policy&lt;/em>. (2020, January 1). Retrieved May 23, 2020 from Zoom, Zoom cookie policy website, &lt;a href="https://zoom.us/cookie-policy">https://zoom.us/cookie-policy&lt;/a>. Notice the important line about how they use third-party analytics providers. How is it possible for Zoom to ensure your data is protected if they use third party analytics providers of which they don&amp;rsquo;t control the data? It&amp;rsquo;s not. We know Zoom uses Google Analytics, and we know that Google&amp;rsquo;s business model is centered around collecting data on its users and selling it for profit.&lt;/p>
&lt;p>Despite claiming they protect your data, they have advertising cookies. The interest-based advertising section states &amp;ldquo;Zoom uses cookies to collect data about your online activity and identify your interests so that we can provide advertising that is most relevant to you. You can opt out of receiving interest-based advertising from Zoom as described in the How to Control Cookies section of this cookie policy and in our Privacy Policy. Users who opt out of the “sale” of their personal information won’t receive interest-based advertising from us on their device. Note: If you opt out of interest-based advertising, we store your opt-out preference in a cookie on your device&amp;rdquo;. Retrieved May 23, 2020 from Zoom, Zoom cookie policy website, &lt;a href="https://zoom.us/cookie-policy">https://zoom.us/cookie-policy&lt;/a>.&lt;/p>
&lt;p>There is a lot there. They collect interest-based data on you automatically. That is, unless you opt-out. Notice it&amp;rsquo;s not opt-in. The default is collecting your data. You have to know it&amp;rsquo;s happening and then choose to opt out which a lot of the more non-technical users of Zoom aren&amp;rsquo;t going to figure out how to do. I personally find it condescending how they put &amp;ldquo;sale&amp;rdquo; in quotes like that&amp;rsquo;s not exactly what they&amp;rsquo;re doing. Further, when you opt out, the fact that you want opted out is stored in a cookie. So if you try to clear tracking cookies from your browser, you might accidentally clear the cookie which says you don&amp;rsquo;t want to be tracked. This also means if you switch browsers or devices, or ever clear your browser cookies, the preference is forgotten and you have to remember to reactivate it every single time. And until you do, you are being tracked by Zoom cookies. Even if you opt-out, there&amp;rsquo;s no guarantee that Zoom doesn&amp;rsquo;t enable a feature to get the same information out of you a different way without using cookies. Again, it&amp;rsquo;s impossible to know because it&amp;rsquo;s against terms of service to reverse engineer Zoom.&lt;/p>
&lt;p>&amp;ldquo;Some of our websites and Products include code snippets provided by social media companies that can sense if you are already logged into a given social media account so you can easily share Zoom content with other social media users via that account&amp;rdquo;. Retrieved May 23, 2020 from Zoom, Zoom cookie policy website, &lt;a href="https://zoom.us/cookie-policy">https://zoom.us/cookie-policy&lt;/a>. This means sites like Facebook and Google know you are using Zoom services and what page you are on. Social media sites use tracking cookies to track what websites you visit. Social media sites shouldn&amp;rsquo;t be allowed to know that. Nevertheless, they are found on Zoom&amp;rsquo;s website and services, the videoconferencing platform that &amp;ldquo;cares about your privacy&amp;rdquo;.&lt;/p>
&lt;h1 id="third-parties">Third Parties&lt;/h1>
&lt;p>Zoom gives your data to third parties. On their &lt;a href="https://zoom.us/subprocessors">subprocessors page&lt;/a>, they list the following third parties which they give your data to: People.ai, Zendesk, Wootric, Totango, Answerforce, Rocket Science Group LLC, Five9, EPS Ventures, WKJ Consultancy, Salesforce, CyberSource, Adyen, Zuora, Amazon Web Services, Oracle America Inc, and Bandwidth. We will ignore the 3 third parties related to billing (CyberSource, Adyen, and Zuora) since if you&amp;rsquo;re not paying Zoom it probably doesn&amp;rsquo;t apply to you. That still leaves 13 subprocessors each with their own privacy policies and their own third parties. You can see very quickly how the amount of third parties your data is being shared with grows exponentially. 11 of the 13 relevant third parties are under US jurisdiction. Since the &lt;a href="https://en.wikipedia.org/wiki/Edward_Snowden#Global_surveillance_disclosures">2013 Snowden leaks&lt;/a>, We know that the U.S. government performs massive dragnet surveillance on US-based companies without any oversight, so it&amp;rsquo;s probably safe to say that the U.S. government is collecting Zoom data from either Zoom itself or Zoom subprocessors.&lt;/p>
&lt;h1 id="weasel-words">Weasel Words&lt;/h1>
&lt;p>Here, Zoom is trying to weasel out of the fact that they are selling your data: &amp;ldquo;As described in the Zoom marketing sites section, Zoom does use certain standard advertising tools on our marketing sites which, provided you have allowed it in your cookie preferences, sends personal data to the tool providers, such as Google. This is not a “sale” of your data in the sense that most of us use the word sale&amp;hellip;It is only with the recent developments in data privacy laws that such activities may fall within the definition of a “sale”&amp;rdquo;. Retrieved May 23, 2020 from Zoom, Zoom Privacy Policy website, &lt;a href="https://zoom.us/privacy">https://zoom.us/privacy&lt;/a>.&lt;/p>
&lt;p>Sadly, Zoom&amp;rsquo;s privacy policy is right. When Zoom gives your data to Google, they are not &amp;ldquo;selling&amp;rdquo; your data in the traditional sense that most people understand the word sale to mean. The part Zoom left out is this. Most people wouldn&amp;rsquo;t understand it as a sale because you&amp;rsquo;re not paying for the service with money. You&amp;rsquo;re paying with your data which is far worse. Zoom &lt;em>allows&lt;/em> Google to collect and sell your data and in return, Zoom receives services from Google such as analytics without &lt;em>explicitly&lt;/em> paying Google for it. Put simply, Zoom pays for Google services with your data. You are the product. Google gets the valuable data to sell, and in return they process it and make it available to Zoom to improve their software or whatever else. This has been Google&amp;rsquo;s business model for a very long time now and just because most customers don&amp;rsquo;t think of the word &amp;ldquo;sale&amp;rdquo; that way doesn&amp;rsquo;t mean they wouldn&amp;rsquo;t expand their definition if they understood the business model.&lt;/p>
&lt;p>This is tantamount to saying &amp;ldquo;Zoom isn&amp;rsquo;t really selling customer data because customers don&amp;rsquo;t understand Zoom&amp;rsquo;s business model&amp;rdquo;. That way Zoom can confidently say they aren&amp;rsquo;t selling customer data misleading customers to think that their data is safe. It&amp;rsquo;s absurd. The &lt;em>essence&lt;/em> of what Zoom is doing is a sale. It&amp;rsquo;s a value transaction of customer data for service. If that isn&amp;rsquo;t a sale I don&amp;rsquo;t know what is. They also use the word &amp;ldquo;standard&amp;rdquo; to make you feel safer. Standard doesn&amp;rsquo;t mean secure. Google analytics and social media tracking cookies may be standard, but that doesn&amp;rsquo;t mean they are good, or even acceptable. It&amp;rsquo;s an example of the bandwagon fallacy.&lt;/p>
&lt;h1 id="citizen-lab-findings">Citizen Lab Findings&lt;/h1>
&lt;p>I already mentioned how Zoom must provide data to the U.S. government, a member of &lt;a href="https://en.wikipedia.org/wiki/Five_Eyes">the Five Eyes&lt;/a>. But Zoom provides data to China as well. &lt;a href="https://citizenlab.ca/2020/04/move-fast-roll-your-own-crypto-a-quick-look-at-the-confidentiality-of-zoom-meetings/">Citizen Lab&lt;/a>, an interdisciplinary laboratory at the University of Toronto, reported several troubling findings on 3 April 2020. I&amp;rsquo;ll just go over the key findings and expand on them.&lt;/p>
&lt;p>Zoom claimed to use AES-256 in their &lt;a href="https://zoom.us/docs/doc/Zoom-Security-White-Paper.pdf">security whitepaper&lt;/a>, however Citizenlab found that they actually use AES-128 in ECB mode. Anyone that knows about block cipher modes knows that ECB mode is not suitable for video conferencing. Citizen Lab included the classic example of the &lt;a href="https://citizenlab.ca/wp-content/uploads/2020/04/image1.png">ECB penguin&lt;/a>, which is why you don&amp;rsquo;t use ECB mode for large files. Any audio or video conferencing over ECB would be as secure as the penguin image on the right, not very secure. Worse yet, the encryption keys were found to be generated by Zoom servers in China even when all meeting participants were outside of China. So the Chinese authorities could get the keys and decrypt Zoom communications of children in K-12 classrooms, U.S. courts using Zoom, meetings between government officials, college students, and everyday Americans as well as non-Americans and other countries that used Zoom.&lt;/p>
&lt;p>Citizen Lab also shows Zoom advertising their use of &lt;a href="https://citizenlab.ca/wp-content/uploads/2020/04/image4.png">end-to-end encryption&lt;/a>. End-to-end encryption means only the communicating parties are able to decrypt the communication. Clearly, with the encryption keys generated on the Zoom server itself, that&amp;rsquo;s not possible. Zoom can decrypt your communications. Citizen Lab also claims that they found a &amp;ldquo;serious security issue&amp;rdquo; with Zoom&amp;rsquo;s waiting room feature, advising users not to use waiting rooms if they care about meeting confidentiality.&lt;/p>
&lt;h1 id="fbi-warnings">FBI Warnings&lt;/h1>
&lt;p>On 30 March 2020, &lt;a href="https://www.fbi.gov/contact-us/field-offices/boston/news/press-releases/fbi-warns-of-teleconferencing-and-online-classroom-hijacking-during-covid-19-pandemic">Boston FBI&lt;/a> issued a warning about using Zoom. According to the warning by Setera (30 March 2020) &amp;ldquo;The FBI has received multiple reports of conferences being disrupted by pornographic and/or hate images and threatening language&amp;rdquo;. This is followed by advice of what to do to prevent Zoom-bombing. But Zoom is not innocent in this because it was possible to scan for random meetings to join. It doesn&amp;rsquo;t strike me as a very useful or necessary feature. Zoom is for teleconferencing. Most meetings will have a specific purpose and the participants don&amp;rsquo;t want random people joining in to disrupt the meeting. So it doesn&amp;rsquo;t make sense to me why this was a feature in the first place. To make matters worse, the FBI report explains Zoom didn&amp;rsquo;t have passwords enabled by default for meetings until January 2020.&lt;/p>
&lt;h1 id="zooms-response">Zoom&amp;rsquo;s Response&lt;/h1>
&lt;p>It wouldn&amp;rsquo;t be fair for me to criticise Zoom without also pointing out steps they have taken to address the platform&amp;rsquo;s many problems. First, I want to focus on their April 1st &lt;a href="https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/">blog post&lt;/a>. Eric S. Yuan claims (April 1, 2020) &amp;ldquo;Thousands of enterprises around the world have done exhaustive security reviews of our user, network, and data center layers and confidently selected Zoom for complete deployment&amp;rdquo;. I would like a full list of these enterprises so I know not to trust their &amp;ldquo;security reviews&amp;rdquo;. Frankly, 128-bit AES in ECB mode is an embarrassing rookie mistake. It basically only happens when you don&amp;rsquo;t know what you&amp;rsquo;re doing. Just looking at Zoom&amp;rsquo;s track record of horrible security and privacy that I&amp;rsquo;ve outlined above, I don&amp;rsquo;t see how thousands of &amp;ldquo;exhaustive security reviews&amp;rdquo; could miss so much.&lt;/p>
&lt;p>In that blog post, Yuan mentions the increased outreach and video tutorials. But security mistakes caused by user error are not really in the scope of this post. One of the first things the post mentions is that on March 27th, the &lt;a href="https://blog.zoom.us/wordpress/2020/03/27/zoom-use-of-facebook-sdk-in-ios-client/">Facebook SDK&lt;/a> was removed from the Zoom app on iOS. It&amp;rsquo;s astounding to me that Yuan can claim in the same blog post detailing the removal of the Facebook SDK that (March 27, 2020) &amp;ldquo;Our customers’ privacy is incredibly important to us&amp;rdquo;. This is insane. If customer privacy was important then the Facebook SDK would never ever have been in the Zoom app. Facebook is an absolute surveillance monster. The SDK spies on people that don&amp;rsquo;t even use Facebook. Apps that really care about privacy don&amp;rsquo;t touch anything Facebook or Google with a ten foot pole. Some information sent by the Facebook SDK was: Application bundle identifier, application instance ID, application version, device carrier, iOS advertiser ID (gross), iOS device CPU cores, iOS disk space available (why???), iOS device disk space remaining, iOS device display dimensions, iOS device model, iOS language, iOS timezone, and iOS version. This doesn&amp;rsquo;t happen by accident. At some point, a developer for Zoom wrote some code for the iOS app to make it send that device information to Facebook on purpose. For a teleconferencing app, the Facebook SDK is absolutely unnecessary. Zoom only remove the SDK after being &lt;a href="https://www.vice.com/en_us/article/z3b745/zoom-removes-code-that-sends-data-to-facebook">called out&lt;/a>. for it. This is an example of being reactive to security and privacy issues, not proactive.&lt;/p>
&lt;h2 id="reactive-not-proactive">Reactive, Not Proactive&lt;/h2>
&lt;p>The Facebook SDK isn&amp;rsquo;t an isolated case either. Zoom didn&amp;rsquo;t start caring about user privacy until they had to start caring about it due to increased media pressure. Here&amp;rsquo;s a &lt;a href="https://blog.zoom.us/wordpress/2020/04/01/facts-around-zoom-encryption-for-meetings-webinars/">Zoom blog post&lt;/a> on April 1st about Zoom encryption practices. In the following quote, we can see Zoom trying to weasel their way around not having end-to-end encryption by redefining words again. Oded gal posted (April 1, 2020) &amp;ldquo;&amp;hellip;we used the term end-to-end encryption. While we never intended to deceive any of our customers, we recognize that there is a discrepancy between the commonly accepted definition of end-to-end encryption and how we were using it&amp;hellip;&amp;rdquo;. When in doubt, just change the meanings of words so you don&amp;rsquo;t look bad. In Zoom&amp;rsquo;s defense, they don&amp;rsquo;t use end-to-end encryption that way legacy protocols can be supported. Protocols such as H.323, SIP, and PSTN don&amp;rsquo;t work with end-to-end encryption. In my personal opinion, these are good reasons to abandon the PSTN (public switched telephone network) and other legacy protocols that don&amp;rsquo;t support end-to-end encryption. In the year 2020, end-to-end encryption should be ubiquitous and we should reject any applications not using it.&lt;/p>
&lt;p>Another absolutely disgusting thing is that Zoom lied to customers again about not selling their data: &amp;ldquo;&amp;hellip;we do not sell our users’ data, we have never sold user data in the past, and have no intention of selling users’ data going forward&amp;rdquo; Eric S. Yuan. (2020, April 1). Retrieved May 24, 2020 from Zoom, Zoom blog, &lt;a href="https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/">https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/&lt;/a>. They did permanently removed the attention tracking feature which never should have existed to begin with. There is no mention of removing Google Analytics though.&lt;/p>
&lt;h2 id="90-day-plan">90-Day Plan&lt;/h2>
&lt;p>To play devil&amp;rsquo;s advocate, I can go through &lt;a href="https://blog.zoom.us/wordpress/2020/05/22/zoom-publishes-draft-design-of-end-to-end-encryption-offering/">Zoom&amp;rsquo;s 90-day plan&lt;/a> focusing all their resources on security and privacy to fix their platform. A few things they have done so far: only the host can screen share by default, participants need consent to be unmuted, audio indication for the waiting rooms, removing Giphy, and giving the host more control over the meeting. They also published a &lt;a href="https://blog.zoom.us/wordpress/2020/05/22/zoom-publishes-draft-design-of-end-to-end-encryption-offering/">draft crypto design&lt;/a> to redo their cryptography. It is apparently available for peer review on &lt;a href="https://github.com/zoom/zoom-e2e-whitepaper/blob/master/zoom_e2e.pdf">Github&lt;/a>. It&amp;rsquo;s still early to see where all this goes. But given that Zoom hasn&amp;rsquo;t ever owned up to selling user data in exchange for service, I don&amp;rsquo;t have my hopes high.&lt;/p>
&lt;h1 id="use-jitsi-instead">Use Jitsi Instead&lt;/h1>
&lt;p>Zoom is a &lt;a href="https://www.gnu.org/proprietary/">proprietary&lt;/a> platform. This means it is essentially a black box. As I mentioned earlier, this means it will always be less trustworthy than free software video conferencing solutions such as &lt;a href="https://jitsi.org/security">Jitsi&lt;/a>. The &lt;a href="https://twitter.com/torproject/status/1244986986278072322">Tor Project&lt;/a> recommended using Jitsi instead of Zoom. I haven&amp;rsquo;t done much research on Jitsi yet, but if the Tor Project is saying to try Jitsi, I would use it over Zoom any day. It&amp;rsquo;s also cross-platform and features actual end-to-end encryption. Even if Zoom implements end-to-end encryption, how can you trust it if it can&amp;rsquo;t be independently reviewed by anyone and no one outside of Zoom can see the source code? How can you trust the implementation on desktop or mobile platforms? In short, you can&amp;rsquo;t. No platform is perfect, however there are more secure and less secure solutions out there. And in general, you want to avoid proprietary programs because they cause the incentives to be aligned in such a way that Zoom will always have reasons to insert privacy-corroding features into their platform.&lt;/p>
&lt;p>When no one except you or your organization can see the source code, there are incentives to insert malicious pieces of code that benefit you at the user&amp;rsquo;s expense. Jitsi does not have the same incentive structure because it&amp;rsquo;s &lt;a href="https://www.gnu.org/philosophy/free-sw.en.html">free software&lt;/a>. Anyone with the know-how can look over the code and see if something fishy is going on. This will never be true of Zoom. Zoom has no reason to ever give away their source code and make their program trusted free software. Part of the reason I dropped out of my classes at my university was because Zoom because being forced on us students and &lt;a href="../../the-tipping-point-rejecting-windows-zoom-lockdown-browser-and-the-lockdown-monitor/">I refused to use it&lt;/a>.&lt;/p>
&lt;h2 id="call-to-action">Call to Action&lt;/h2>
&lt;p>I&amp;rsquo;m not saying you, the reader, should go as far as I did. I&amp;rsquo;m just saying if we, as a society, want to live in a world where we are given more privacy and security in our digital lives, then we have to say no to platforms like Zoom. If we don&amp;rsquo;t, we will move ever closer to some kind of dystopian surveillance hell, assuming we aren&amp;rsquo;t already there. Ask yourself this question: If you don&amp;rsquo;t reject these untrusted proprietary platforms with a horrible track record, then who will? How many people do you know that would reject Zoom if their boss or professor told them to use it? The demand for our digital rights back has to start somewhere, before it&amp;rsquo;s too late.&lt;/p></description></item><item><title>Rejecting Visual Studio</title><link>https://0gitnick.xyz/rejecting-visual-studio/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/rejecting-visual-studio/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>This semester I took Intro to Artificial Intelligence at &lt;a href="https://www.siue.edu">SIUe&lt;/a>. Artificial Intelligence is a senior level course. I&amp;rsquo;ll call the professor, &amp;ldquo;Professor X&amp;rdquo; to preserve anonymity.&lt;/p>
&lt;h2 id="story">Story&lt;/h2>
&lt;h3 id="assignment-one---cats">Assignment One - Cats&lt;/h3>
&lt;p>Since my time giving in to using Visual Studio in software engineering class and seeing the inner conflict that caused, I was much more prepared to stand up for my beliefs in A.I. class. The very first assignment we got was to write an A.I. that solves a &amp;ldquo;cat in the hat&amp;rdquo; problem involving finding certain values for the height of the cats and number of cats in each hat (each cat has a hat with more cats except the cat at height one). I was intrigued. I could have written a program that simulates the cats, but I instead went for an analytical approach and derived two single logarithmic equations that yielded the values efficiently. I still wasn&amp;rsquo;t sure how to solve both equations, so I developed a binary search algorithm for the right value instead. I was disappointed however when after reading the specification I discovered the project had to be completed using Visual Studio and written in C++. Visual Studio is proprietary software made by Microsoft that requires users to agree to a license agreement (which I read) and submit themselves to privacy-invading telemetry. Ew.&lt;/p>
&lt;p>I was not thrilled about this, so I opted to write my program using a different IDE and compile it with the gnu-c++ compiler. I wanted to get ahead of this so there wouldn&amp;rsquo;t be any issue, so I emailed Professor X explaining why Visual Studio is proprietary malware, or at least potential malware. Professor X responded that he did not believe it is malware and I should use it anyway. So I responded over email again explaining my beliefs about free software and why students ought not be required to use Visual Studio. He said he would consult with his colleagues about it and the grader as well. Professor X and the grader got back to me explaining that they couldn&amp;rsquo;t change the assignment just for me as there were over thirty students in the class and allowing students to submit their work differently would be too much hassle. Maybe don&amp;rsquo;t ask students to use proprietary software?&lt;/p>
&lt;p>After I had already written my program, I spent over four extra hours learning how to use &lt;a href="https://cmake.org/">CMake&lt;/a> so hopefully it would open in Visual Studio when the grader went to grade it. This was extra work I did that no one else in class had to do because I refused to use proprietary software. After I submitted it, I got a grade of zero because the grader was unable to run my program in Visual Studio. As a side note, it seems ludicrous to me that we were demanded to submit our C++ programs in the form of Visual Studio project files. That is just not a sane way to submit a project. But anyway, I sent a long email to the professor again explaining that my program did compile and run and that I spent four hours trying to use CMake to get it to work for the grader. He emailed back saying how me using CMake was a huge waste of everyone&amp;rsquo;s time, and if I had such a strong problem with Visual Studio, then maybe I should go talk to the dean about it instead of talking to individual professors about my beliefs. I guess his point was if the dean didn&amp;rsquo;t agree that the university should only use free software then I should just accept proprietary software?&lt;/p>
&lt;p>The professor and grader agreed, just for this one time, to regrade my program to reflect the work I put in instead of my willingness to agree to Microsoft&amp;rsquo;s insane licenses and run proprietary malware just to write a C++ program, and I got a 90% losing 10% only because I submitted a day late. For the next two programs, the professor and grader agreed that I can submit only the source code cpp files because the grader had figured out how to run them in Visual Studio.&lt;/p>
&lt;h3 id="assignment-two-and-three">Assignment Two and Three&lt;/h3>
&lt;p>The second assignment was &lt;a href="https://en.wikipedia.org/wiki/Klotski">Huarong Path&lt;/a>, also called Klotski. It is a sliding puzzle where you try to get a particular piece into a particular spot on the board by sliding all the tiles around until you have the piece in the destination spot. There are many heuristics you can develop for this, but I found that implementation was just as important as heuristics. The third assignment was Fore &amp;amp; Aft where you try to reverse the positions of the differently colored pegs. Imagine a large square broken into four quadrants, but two quadrants that are diagonal to one another are missing, and there is one empty center peg and the quadrants have differently colored pegs. The rules are that you can move any peg into an empty adjacent peg or jump over pegs like in the game checkers. I ended up using &lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A*&lt;/a> to solve the puzzle. I was able to submit these two assignments with only the source code files, so I didn&amp;rsquo;t have to use Visual Studio and there was no problem.&lt;/p>
&lt;h3 id="assignment-four---n-queens-puzzle">Assignment Four - N Queens Puzzle&lt;/h3>
&lt;p>Fast forward to the fourth assignment. It was an N Queens puzzle. For N=8, this is better known as the &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle">8 Queens Puzzle&lt;/a>. This was my favorite puzzle to write a solution for. I found a simple &lt;a href="https://en.wikipedia.org/wiki/Hill_climbing">hill-climbing&lt;/a> algorithm from our textbook that was much faster at finding solutions than was asked of us. We had to find three unique solutions. I just allowed my program to take as input the board size as well as the initial position of the first queen. For some reason it was stipulated that we had to enable one queen in the solution to be &amp;ldquo;fixed&amp;rdquo; to a certain square so she was guaranteed to be there. It didn&amp;rsquo;t take me long to have this solution written up and submitted, but my grade unexpectedly returned with a failing grade for the assignment. It was because gnu-c++ allowed specifying C arrays without a size, but the standard C++ compiler didn&amp;rsquo;t, so it didn&amp;rsquo;t compile in Visual Studio.&lt;/p>
&lt;p>When I turned on warnings when compiling with gnu-c++, I immediately saw what the grader was talking about and fixed it. The grader allowed me to fix it since it was just an issue with the compiler compatibility and not my code. I got full points back for this assignment. I was told after the first assignment that it would be my responsibility to make sure my code worked in Visual Studio and if it didn&amp;rsquo;t, I would be graded accordingly. But the grader was willing to allow this to slide since it was such a minor issue and strictly to do with compiler compatibility.&lt;/p>
&lt;h3 id="encounter-with-professor-x">Encounter with Professor X&lt;/h3>
&lt;p>I talked with Professor X in person outside of class about proprietary Visual Studio. The first thing I remember that he mentioned was how hard it would be for me finding employment with my philosophy about software. This is undeniably true. There is far less money in creating free software than proprietary freedom-destroying software. So I explained to him that my primary focus isn&amp;rsquo;t just employment or living the easiest life possible.&lt;/p>
&lt;p>If I wanted to live an easy life and disregard my ethics totally then yes I could do that. But I need to do something to make the world a better place, or at least not worse. There&amp;rsquo;s already enough people making it worse. Also, it&amp;rsquo;s obvious that I&amp;rsquo;ll have to work somewhere that is going to allow me to work within my free software values. I&amp;rsquo;m not going to be working at AT&amp;amp;T, Google, or Microsoft. If I&amp;rsquo;m not able to make a living with free software, I&amp;rsquo;ll do some job unrelated to computer science for an income and write free software on the side. It would be much easier to sleep at night doing that instead.&lt;/p>
&lt;p>He then suggested I use the university computers instead of my own. I explained to him how this doesn&amp;rsquo;t solve the issue because Visual Studio is still proprietary and I would have to use the Windows malware that is installed on campus computers as well. He said that the university has a deal with Microsoft in which Microsoft deactivated their surveillance features for university computers. SIUe does have a deal with Microsoft (which is why they use so much Microsoft software), but I seriously doubt Microsoft deactivates the spying (telemetry) features for their programs at SIUe. Even if they do, Windows and Visual Studio are still proprietary so there&amp;rsquo;s no way to confirm that.&lt;/p>
&lt;p>There was also the extremely common confusion about how software companies will make money producing only free software. Beforehand, I had emailed Professor X supporting links from the &lt;a href="https://www.fsf.org">FSF&lt;/a> website explaining about free software. I tried explaining that it&amp;rsquo;s not about price, but freedom. I could have been misreading the situation so don&amp;rsquo;t take this as fact, but it seemed to me that he didn&amp;rsquo;t have any interest in learning about free software or the ethical implications. He seemed more interested in getting me to conform to using Visual Studio so that it would make his and the grader&amp;rsquo;s job easier. The reason I think that is because throughout our entire prolonged exchange, emails and in person, he didn&amp;rsquo;t mention ethics once and expressed his sentiment that the conversation was &amp;ldquo;pointless&amp;rdquo;. I don&amp;rsquo;t think conversations about ethics are &amp;ldquo;pointless&amp;rdquo;. I think a conversation about ethics is important before starting any project, not just writing software.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I have seen this theme again and again having conversations with professors. Perhaps I just don&amp;rsquo;t explain free software well enough, which is why I provided links and video resources to Professor X. One thing I often see, which is true of anyone changing their mind in general, is that people won&amp;rsquo;t do it on the spot in realtime. Reading a post like this you may think that I wasted my time. But people do change their minds and it almost always happens in private, not under the pressure of a realtime conversation. And even if people don&amp;rsquo;t change their minds completely, they can often be nudged in the right direction. So don&amp;rsquo;t lose hope just because someone doesn&amp;rsquo;t immediately see things your way. Many professors at SIUe that I&amp;rsquo;ve talked to just aren&amp;rsquo;t accustomed to thinking about software freedom as an important issue. I expressed my frustration to Professor X about how the issues he was bringing up were peripheral to me, and that if he really wanted to convince me to use Visual Studio and Windows he would have to show me why my ethical beliefs are wrong.&lt;/p>
&lt;p>The truth is unless someone is very brave and intellectually honest, they&amp;rsquo;re not going to change their mind (admit they were wrong) on the spot. Especially professors because they would have to rewrite entire assignments to use different software and restructure their coursework which is potentially a lot of work. I think they are also strongly encouraged from above to use particular proprietary software because of the university&amp;rsquo;s deal with Microsoft. They would have to go against that. But I have seen professors use their own computers in class, so it&amp;rsquo;s still very feasible. It&amp;rsquo;s a lot of work that professors aren&amp;rsquo;t required to do and for reasons most of them aren&amp;rsquo;t accustomed to considering. I&amp;rsquo;m not defending their decisions to continue using proprietary software, just explaining why they don&amp;rsquo;t change things. I&amp;rsquo;d like to engage with a professor and see them realize my point on the spot and decide then and there to restructure their course to be more ethical, but that never happens.&lt;/p>
&lt;p>Nonetheless, I do think the conversations I&amp;rsquo;ve had do have an impact. And most of that impact I&amp;rsquo;m not seeing because it happens in private after a lot of thought given to ethics, but it does happen. As a matter of strategy, my advice to anyone trying to spread the word about free software at work or universities is twofold.&lt;/p>
&lt;h3 id="advice-1">Advice 1&lt;/h3>
&lt;p>Keep having conversations with people about free software, every opportunity you get that seems appropriate. Especially have conversations with those with the most authority to do something to make change. Don&amp;rsquo;t worry about looking like a fool because times are desperate and if free software philosophy doesn&amp;rsquo;t spread more, we risk losing more ground to encroaching proprietary software. We cannot let the free world disappear.&lt;/p>
&lt;h3 id="advice-2">Advice 2&lt;/h3>
&lt;p>Encourage others to reject proprietary software and reject it yourself. Get a few people who agree with you and form a club or pact to reject it. There&amp;rsquo;s not always free software that perfectly replaces proprietary software, in which case you must reject the proprietary software entirely with no substitute. At SIUe and any other universities, professors aren&amp;rsquo;t going to take much notice if you go off on your own trying to create little workarounds for the proprietary software they want you to use. The only action which they have to respond to is when you outright refuse to use the proprietary software and most importantly tell them why you&amp;rsquo;re rejecting it. It&amp;rsquo;s helpful to propose free software at the same time, but most important is telling them you refuse to use proprietary software and stand behind that decision with unflinching stubbornness. The only way to slow the encroachment of proprietary software in schools, universities and workplaces is to refuse to use or develop it, demand alternatives, and spread the word.&lt;/p></description></item><item><title>Inception - Rejecting Discord, Draw.io, and Visual Studio</title><link>https://0gitnick.xyz/inception-rejecting-discord-draw.io-and-visual-studio/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/inception-rejecting-discord-draw.io-and-visual-studio/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>In the spring of 2018, I took software engineering at &lt;a href="https://www.siue.edu">SIUe&lt;/a>. Software engineering is a junior level CS course. In my view, it serves as preparation for the more demanding two semester development effort that is the senior project. I&amp;rsquo;ll call the professor, &amp;ldquo;Professor X&amp;rdquo; to preserve anonymity.&lt;/p>
&lt;h2 id="story">Story&lt;/h2>
&lt;h3 id="project-i">Project I&lt;/h3>
&lt;p>The first project was for the purposes of getting everyone accustomed to using Git and Redmine and working in a team as well as doing some documentation. We were put in groups of three to four and given the task of writing a fairly simple program with a GUI and some basic functionality in C#. I remember being very anxious upon forming a group because I knew my group members would likely want to use &lt;a href="https://slack.com">Slack&lt;/a> or &lt;a href="https://discordapp.com/">Discord&lt;/a> or some other popular proprietary walled garden messaging platform. Luckily for the first project of the class, my three group members were not thrilled, but were willing to undergo the inconvenience of downloading and using &lt;a href="https://riot.im/">Riot.im&lt;/a> / &lt;a href="https://matrix.org/">Matrix&lt;/a>.&lt;/p>
&lt;h4 id="communication">Communication&lt;/h4>
&lt;p>It was awkward and uncomfortable to be the only person in the group refusing to use Discord when everyone else very quickly came to a consensus on it. Peer pressure is a real thing. But after explaining my reasons, I was able to win over the group after a few days and get everyone using Riot. I even got everyone to exchange their device keys over email so we could all have an encrypted group chat. The peace of mind of having an encrypted room and using free software instead of having our group messages data mined and sold as would have been the case with Discord cannot be overvalued for me. I didn&amp;rsquo;t really win the group over by convincing them with the benefits of encryption and free software. I think they just wanted to get the project moving along and saw the easiest way forward was to adapt to me. So I got past the first hurdle.&lt;/p>
&lt;h4 id="ide">IDE&lt;/h4>
&lt;p>I don&amp;rsquo;t recall the specifics of the program, but it probably had some buttons and text boxes and would have been similar in difficulty to a graphical desktop calculator application. Our group did the required UML diagrams. The only thing left was to code the classes we diagrammed. This is where the trouble started for me. Professor X&amp;rsquo;s project specification I believe was handed down from Professor Y who died unexpectedly. So Professor X was standing in for Professor Y teaching with his slides. Unfortunately I&amp;rsquo;ve heard Professor Y had a love for Windows and his project specification required everyone to use Visual Studio.&lt;/p>
&lt;p>At this point I got worried because Visual Studio is proprietary software, and it was a battle with my conscience to use it or not. I definitely wasn&amp;rsquo;t willing to install it on my personal machine. So instead, I found Monodevelop and was able to use it to complete project I. We still had to use Winforms for the GUI part which was awful, but at least I was able to avoid Visual Studio. The members of my group installed and used Visual Studio on their personal computers. So far, I had been able to completely avoid proprietary software.&lt;/p>
&lt;h3 id="project-ii">Project II&lt;/h3>
&lt;p>Project II was a similar story to project I except that I was in a group of three instead of four. This time, we were assigned a project called Cougar Delivery. The specifications outlined a delivery service we had to make software for. The delivery service software had to perform tasks such as tracking shipments, generating performance reports and cost of business charts, allow clients to order shipments and generate routes for shipping packages for the shipping business. It had many more requirements, so I won&amp;rsquo;t list them all. But the idea was a single graphical application that enabled all the business operations related to running a delivery business. Realistically, this would have been divided up into several applications that handled general aspects of business such as finances, tracking, client and employee login systems and permissions, and more. But the point of the class was documentation and design rather than implementation.&lt;/p>
&lt;h4 id="communication-1">Communication&lt;/h4>
&lt;p>Again, it was awkward asking everyone to use Riot when they had never heard of it. I had a hard time finding a soft way to propose using it when I wasn&amp;rsquo;t willing to accept a proprietary alternative. But my two group members were willing to use it. I again was able to convince them to exchange device keys in person for an encrypted room. So far, all was well.&lt;/p>
&lt;h4 id="documentation">Documentation&lt;/h4>
&lt;p>And so we began our documentation. This time, I was not our project lead. Another team member had more time to work on the project, so he took the initiative. He was very diligent and before we had even started writing code, we ended up with an estimate of close to eighty classes total. We had polished UML diagrams for all those classes including package diagrams and UML class diagrams and a three tier architecture established before a single line of code was written. I was very satisfied with that. For my diagrams, I used &lt;a href="http://dia-installer.de/">Dia&lt;/a> and my teammates used &lt;a href="https://app.diagrams.net/">draw.io&lt;/a>. Dia was difficult and annoying to use as far as alignment goes. It might have been due to my inexperience never having used it before, but I used it anyway for freedom. Draw.io is not free software. It uses proprietary Javascript and requires a software license to purchase the app. Nevertheless my teammates were able to at least export their diagrams in png format so I could see them using free software. Our project lead claimed to have used Dia before and said it was too inconvenient usage-wise.&lt;/p>
&lt;p>The deliverables for the project were scheduled in such a way that we had to do all the documentation before starting the project, and continually revise documentation as the project went along. Our documentation was so effective that I trust we could&amp;rsquo;ve handed it to any other group in the class, and they would have been able to implement our entire design. Some of the documents were done using Google Docs regrettably. I strongly suggested using &lt;a href="https://sandstorm.io/">Sandstorm&lt;/a> instead since it is free software and doesn&amp;rsquo;t require proprietary Javascript in the browser. That did not end up happening since I had other classes to worry about and we were crunched for time. If I could retake the class, I would have created a separate shared repo for documentation and used a word processor for editing instead. Our team lead did not see this as viable since he felt we needed to be able to see everyone else&amp;rsquo;s changes in real time. There was a lot of talk about using Sandstorm, but I was never able to make it happen.&lt;/p>
&lt;p>Another possible free software self-hosting alternative to Google Docs would have been an &lt;a href="https://etherpad.org/">Etherpad&lt;/a> instance, but public Etherpad instances did not have the plugins necessary for nicely formatting documents unless I self-hosted and installed them myself. And I guess I didn&amp;rsquo;t have the time to set up an instance or something. But I did put a few hours of work in trying to get it working. It was very discouraging to be working so hard on something very tangientially related to our actual project. I wasn&amp;rsquo;t able to move the group toward using Etherpad either. I ultimately ran out of time trying to make it work. I was the one pushing to use something besides Google Docs mainly due to its proprietary Javascript.&lt;/p>
&lt;p>After I had been defeated unable to move the group to something besides Google Docs, I gave in to using Google Docs which I was able to use anonymously without an account. I just used the shared link. But I still had to run the proprietary Javascript in the browser which I now regret giving in to. This failure was very discouraging and harmed my motivation for doing the project. I discussed this extensively with the project lead but we weren&amp;rsquo;t able to bypass the issue. After this failure, I didn&amp;rsquo;t know the worse was still yet to come.&lt;/p>
&lt;h4 id="testing-framework">Testing Framework&lt;/h4>
&lt;p>We had to use a testing framework for the current project iteration to test our code. Of course our professor&amp;rsquo;s hand-me-down specification and slides insisted that we use MSTest. I did some background research because it sounded proprietary. I found it was available for MonoDevelop, but when I went to install it, it asked me to read and sign a license agreement first. I believe it was proprietary based on the terms it was asking me to agree to when I tried to install it through MonoDevelop. I clicked decline. Instead of installing it, I dug in my heels and went to the professor after class. Regrettably, I did not mention the idea of free software very explicitly. Instead I talked about how I wasn&amp;rsquo;t willing to agree to the terms so MonoDevelop could run the tests. He chuckled when I mentioned I wasn&amp;rsquo;t using Visual Studio as the project requirements laid out, preparing for a potentially awkward conversation. And then when I mentioned not wanting to use the testing framework, he seemed perplexed. He told me I could write the unit tests and have a team member who has Visual Studio run them, thus bypassing agreeing to the license. This didn&amp;rsquo;t satisfy me though, because it just passes the buck off to someone else. I definitely wasn&amp;rsquo;t going to rely on my team members to agree to something I myself wouldn&amp;rsquo;t. I let him know that I felt his idea didn&amp;rsquo;t really solve the issue for me. I asked Professor X if I could use the NUnit testing framework instead, a libre library. He told me to ask the grader.&lt;/p>
&lt;p>So I emailed the grader explaining in detail my ethical concerns about MSTest. He got back to me promptly admitting that he did not know about the ethical issue and would be willing to accomodate me given that NUnit could work in Visual Studio. It could, so I wrote my tests for our code using NUnit. I even rewrote some of our tests that had been written in MSTest into NUnit to increase the freedom of our project which wasn&amp;rsquo;t too difficult. I had successfully dodged what could have became a freedom issue. I also discussed this with our group. They continued writing the unit tests using MSTest.&lt;/p>
&lt;h4 id="ide-1">IDE&lt;/h4>
&lt;p>I thought I would be able to use MonoDevelop as before without any issues. I had solved the issue of the testing framework. What more issues could arise? The database. The instructions for the database in the database tier of our three tier architecture were written to explain how to use the SQL database in Visual Studio. It used libraries that only worked in Visual Studio if I recall correctly. This caused an inner conflict for me. I had never failed a class before, but I knew the professor wasn&amp;rsquo;t going to rewrite the specifications in the middle of the project and it would be too much for the grader to try to get something else working and too much for me to research another solution. I talked about this issue ad nauseum to our group lead, who was sympathetic but tried to still convince me to just write the database anyway. I wasn&amp;rsquo;t able to get him to really make sense of the freedom issue despite sending supporting links from the FSF website to explain my position. After heated debate, we eventually came to the compromise that I would only work on the part of our program that did not include the database. I would work on the other two tiers; the controller and graphical interface. I now regard this compromise as a mistake.&lt;/p>
&lt;p>This still did not resolve the issue because I was unable to compile our program without having the SQL database that only worked in Visual Studio. I painfully forced myself to use Visual Studio in the university computer lab to write the project. This occurred with our team late at night all of us working furiously before the due date to get as much coded as possible and submitted. We were doing rapid trio programming because none of us had time until the last moment to work on the project. I was glad to have finished the project, but still giving in to using proprietary software did not sit well with me. I was ashamed of having given in but also understood my teammates would have had to give me a bad performance report if I outright refused to work on the project due to the database tier. So practically the choice was between failing and tacitly condoning Visual Studio by using it. I made the mistake of choosing to use Visual Studio to pass instead of putting my foot down and refusing and going to the professor again about the ethical issue. I think I didn&amp;rsquo;t go to the professor again because I didn&amp;rsquo;t want to inconvenience him too much to avoid another awkward conversation. I ought to have went immediately to the professor again to discuss the freedom issue. I passed the class with a good mark and accomplished the project, but still felt gross about giving in to proprietary software.&lt;/p></description></item><item><title>Rejecting Discord and Google Colab</title><link>https://0gitnick.xyz/rejecting-discord-and-google-colab/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/rejecting-discord-and-google-colab/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>This semester I took Deep Learning at &lt;a href="https://www.siue.edu">SIUe&lt;/a>. Deep learning is a senior level CS elective course. I&amp;rsquo;ll call the professor, &amp;ldquo;Professor X&amp;rdquo; to preserve anonymity.&lt;/p>
&lt;h2 id="story">Story&lt;/h2>
&lt;p>In Deep Learning class, after the lectures, we had to get into groups for our class project. The class project consisted of designing and implementing our own neural network which would do some novel task. It didn&amp;rsquo;t take me long to get into a group. The issue as always was finding a communication platform that we could all use that was free software. Since most students opt for proprietary walled gardens instead such as &lt;a href="https://discordapp.com/">Discord&lt;/a>, I had a lot of difficulty because I wasn&amp;rsquo;t willing to use Discord. Our whole group of four agreed on using Discord except for me. Email wouldn&amp;rsquo;t be viable. It&amp;rsquo;s not great for real time communication and file sharing. Even after I explained that I don&amp;rsquo;t use proprietary software, the group still did not want to budge as I expected. So the admin of the Discord &amp;ldquo;channel&amp;rdquo; and I got together and set up a &lt;a href="https://matrix.org/bridges/">Matrix bridge&lt;/a>. I was surprised at how easy this was. Because Matrix has a &lt;a href="https://github.com/Half-Shot/matrix-appservice-discord">Matrix-Discord bridge&lt;/a> available and there is a &lt;a href="https://t2bot.io/">public bot&lt;/a> called t2bot, I was able to use Riot.im client instead of Discord. Riot.im is free software and Matrix is an open protocol which is more acceptable than the proprietary walled garden of Discord. The bot allowed me to create a Matrix room which bridged Discord and the Matrix network. It took less than ten minutes to set up. Now that I got the hang of using it, I&amp;rsquo;m able to get it working in less than five minutes. There are a few quirks but overall it works fantastically and it&amp;rsquo;s completely free. I recommend &lt;a href="https://t2bot.io/donations/">donating&lt;/a> if you use the bot since there is no charge for using it. It&amp;rsquo;s a great tool for avoiding proprietary Discord and Slack.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com">Google Colab&lt;/a> is a service Google offers that gives researchers and students a free GPU. It can be used for things like training neural networks in Python. It wasn&amp;rsquo;t required for this course per se, but if you didn&amp;rsquo;t have one you had better have a GPU or be in a group with a member that had a GPU. I have a computer with a GPU, but it is AMD, not Nvidia so it wouldn&amp;rsquo;t work with the Python libraries like Keras and Tensorflow we were using to train the neural networks. I discovered this after I had already set up the machine for class unfortunately. I really took issue with Google Colab being basically required. If students didn&amp;rsquo;t agree to the Google terms of service, how would it be possible to do the project? You could have relied on a group member to have an account and train the networks, but that just pushes the problem back a step to your team member agreeing to the terms of service. Worse, Colab requires proprietary Javascript in the browser so you would have to run proprietary code to use it. And you know Google is collecting your experiment data in case you find something of interest because that&amp;rsquo;s their whole evil business model.&lt;/p>
&lt;p>I ended up emailing Professor X about the issue explaining that students shouldn&amp;rsquo;t have to agree to Google&amp;rsquo;s terms of service and run proprietary Javascript just to take Deep Learning class. He responded saying unfortunately that while he understands my concerns that&amp;rsquo;s the only way the class could exist and also it was in the syllabus. I don&amp;rsquo;t believe that at all. If it was within budget, the school could offer students GPUs in a lab to train the neural networks the same way the networking lab has special networking equipment for each student. Of course SIUe isn&amp;rsquo;t going to do that because it costs lots of money and using a service from an evil data collecting company costs only your soul. Besides, no one except me in the whole computer science department would care about the ethical advantage of students having their own dedicated GPUs, so it wasn&amp;rsquo;t in SIUe&amp;rsquo;s interest to purchase GPUs for each student.&lt;/p>
&lt;p>There were other problems with the class as well not related to proprietary software. I believe the average grade on the midterm was below 50%. There was a lot of background needed to understand the concepts in class that many students didn&amp;rsquo;t have. I felt like my time was being wasted every day in the class because too much material was being covered way too quickly to really learn anything. I don&amp;rsquo;t say that about many classes because there&amp;rsquo;s always the student responsibility to study, but if you ask me that class was a mess. So after I found out my GPU wouldn&amp;rsquo;t work and I couldn&amp;rsquo;t train our group&amp;rsquo;s network myself, I completely lost motivation for the project. There was no way for me to run the code since I refused to sign up to Google Colab. I couldn&amp;rsquo;t even check if my code ran and due to COVID-19, I couldn&amp;rsquo;t get with any group members who had a GPU. The only option was to rent a VPS with a GPU and neural network training capabilities. I decided ultimately that I shouldn&amp;rsquo;t have to and wasn&amp;rsquo;t going to rent a VPS just to pass a class. Despite having our midpoint report finished and a working neural network, I wasn&amp;rsquo;t really learning anything to the depth I wanted to in that class, and the proprietary Google Colab had me discouraged, so I dropped the class.&lt;/p></description></item><item><title>The Tipping Point - Rejecting Windows, Zoom, Lockdown Browser, and the Lockdown Monitor</title><link>https://0gitnick.xyz/the-tipping-point-rejecting-windows-zoom-lockdown-browser-and-the-lockdown-monitor/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://0gitnick.xyz/the-tipping-point-rejecting-windows-zoom-lockdown-browser-and-the-lockdown-monitor/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>This semester I took networking at &lt;a href="https://www.siue.edu">SIUe&lt;/a>. Networking is a senior level CS course. I&amp;rsquo;ll call the professor, &amp;ldquo;Professor X&amp;rdquo; to preserve anonymity.&lt;/p>
&lt;h2 id="story">Story&lt;/h2>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>The first software freedom issue I had in this class had to do with the Wiresharks labs. &lt;a href="https://www.wireshark.org/">Wireshark&lt;/a> is free software that can be used to capture and analyse network traffic. So there was no issue with Wireshark. Actually, the issue was with the assignment instructions. The instructions were written so that some tasks had to be performed outside of Wireshark and screenshotted. If I remember correctly Professor X said he did not make any changes to the assignment before giving us the assignment. The assignments were actually obtained from the &lt;a href="https://gaia.cs.umass.edu/kurose_ross/wireshark.htm">University of Massachusetts, Amherst&lt;/a>. The DHCP Wireshark lab contained instructions that only work on Windows.&lt;/p>
&lt;p>It wouldn&amp;rsquo;t have been hard for me to find the equivalent commands on GNU/Linux, but by this point I realized that me doing all the legwork to get things working on GNU/Linux ultimately doesn&amp;rsquo;t do much good. It gets me by but it doesn&amp;rsquo;t help other students or have any effect moving coursework toward using free software. So instead, I decided I wasn&amp;rsquo;t going to do the extra work myself, and instead included a note in my completed assigment submission stating that I don&amp;rsquo;t own a Windows machine and wouldn&amp;rsquo;t use it. So I downloaded the Wireshark trace from the University of Massachusetts (the assignment said we could do this if we couldn&amp;rsquo;t get Wireshark to capture). I imported it into Wireshark and used it for the duration of the assignment.&lt;/p>
&lt;p>Back in class after the assignment was graded, Professor X announced that students would no longer be permitted to download the trace from the University of Massachusetts. It would have to be captured manually by following the Windows-only instructions. This swiftly closed the loophole I used to bypass using Windows. Therefore, it is no longer possible to take networking with Professor X without using Windows unless you want to do extra work. And by the way, this is one of, if not the most ardent GNU/Linux professors at SIUe based on my experience. He said in class that he uses &lt;a href="https://www.archlinux.org/">Arch&lt;/a> and is comfortable doing things in the terminal. The point I&amp;rsquo;m trying to get across is that if you want to only use free software, do not study at SIUe. It is not a free software friendly university and you will struggle trying to work around that.&lt;/p>
&lt;h3 id="zoom">Zoom&lt;/h3>
&lt;p>After the corona virus lockdown was declared in Illinois and the university shut down all classes on campus, the lectures needed a way to continue. Professor X went for &lt;a href="https://zoom.us/">Zoom&lt;/a>. Zoom is proprietary crapware. You can download Zoom on your computer or use it through the browser which probably requires proprietary Javascript and camera and microphone access. I emailed Professor X if there was another way I could watch the lectures. To accomodate me, he began recording the meetings and emailing them to everyone. However, he said he was still taking attendance with Zoom unfortunately. So I found out it&amp;rsquo;s possible to use &lt;a href="https://en.wikipedia.org/wiki/Session_Initiation_Protocol">SIP&lt;/a>. I attempted to set up an SIP account so I could use Zoom, but then I quickly gave up on that and decided on just using the recordings. I felt that I shouldn&amp;rsquo;t have to do extra legwork to avoid using proprietary software. If professors are going to suggest proprietary software to students, which they shouldn&amp;rsquo;t, then they should at least offer a free software alternative that works equally well. Of course, Zoom in the long run is turning out to be a disaster as proprietary software often does.&lt;/p>
&lt;p>I want to elaborate a bit on how Zoom is turning out to be a disaster. Zoom is a privacy nightmare. It actually has an attention tracking feature documented in the &lt;a href="https://support.zoom.us/hc/en-us/articles/115000538083-Attendee-attention-tracking">knowledge base&lt;/a> which creepily allowed hosts of a Zoom meeting to track if the participants were paying attention or not. The CEO &lt;a href="https://blog.zoom.us/wordpress/2020/04/01/a-message-to-our-users/">addressed multiple issues&lt;/a>. One issue was uninvited participants joining and crashing conferences. Another was that the iOS client contained the Facebook SDK. Facebook is a surveillance monster, so of course that was an absolute privacy disaster and it had to be removed. Zoom video and audio doesn&amp;rsquo;t even have end-to-end encryption according to &lt;a href="https://theintercept.com/2020/03/31/zoom-meeting-encryption/">this article&lt;/a>. Hackers quickly found a way to exploit Zoom to expose Windows passwords and showed a &lt;a href="https://twitter.com/hackerfantastic/status/1245133371262619654">screenshot of it on Twitter&lt;/a>. Some Zoom calls may have been routed through China, where geofencing should have prevented this. &lt;a href="https://www.businessinsider.com/china-zoom-data-2020-4">The CEO didn&amp;rsquo;t say how many users could have been effected&lt;/a>. China does not enforce laws about personal data privacy so who knows if the calls got collected, stored, or analyzed.&lt;/p>
&lt;p>So now some universities are rushing over to Microsoft Teams, which will also be a privacy and security disaster forced upon students yet again. They are just going from one proprietary privacy disaster to the next when the best solution is to just use free software. Teams is proprietary and the Teams website requires proprietary Javascript and perhaps worse a Microsoft account where you must agree to their insane terms of service. So at this point you may be wondering, what free software is out there that would be reasonable for schools to use that would be better? &lt;a href="https://jitsi.org/jitsi-meet/">Jitsi&lt;/a> seems like a very viable alternative. It allows video calling, voice calling, meetings between an unlimited number of participants, and no sign up or account required. I&amp;rsquo;m not sure about the encryption and data privacy it has, but at least you know it doesn&amp;rsquo;t come with the Facebook SDK. Besides, there is also &lt;a href="https://matrix.org/">Matrix&lt;/a> which is cross-platform and has multiple clients. There are free software options available that universities should be looking into rather than all jumping onboard the Zoom train, then jumping onto the Teams train after Zoom derailed.&lt;/p>
&lt;h3 id="lockdown-browser--monitor">Lockdown Browser &amp;amp; Monitor&lt;/h3>
&lt;p>Due to corona virus, the final exam was going to have to change also. Obviously, us students couldn&amp;rsquo;t take the exam in person and this opened up doors to potential cheating. I found out we were going to have to use the intrusive proprietary Windows or Mac only garbage that is the &lt;a href="https://web.respondus.com/">Respondus Lockdown Browser&lt;/a>. So I contacted Professor X over email to find out if there was an alternate way to take the exam. For example, being given access to the final exam and then given a certain time window to finish and upload it. He told me this wouldn&amp;rsquo;t be possible. The browser apparently detects and does not allow usage through a VM based on the &lt;a href="https://support.respondus.com/support/index.php?/Knowledgebase/Article/View/201/25/i-receive-a-warning-the-browser-cant-be-used-in-virtual-machine-software-such-as-virtual-pc-vmware-and-parallels">Respondus knowledgebase&lt;/a>. Since I don&amp;rsquo;t own any Windows machines and I&amp;rsquo;m required lawfully and ethically to social distance myself, the only way I know I can complete the exam without issues is by partitioning my hard drive and installing the latest Windows, just for this one exam that lasts less than two hours.&lt;/p>
&lt;p>Furthermore, even though I could do all that, I&amp;rsquo;m not willing to. That would be using Windows and the Lockdown browser and implicitly affirming that forcing proprietary software on students is okay. Professor X emailed me a second time and informed me that it wasn&amp;rsquo;t really his choice to use Respondus Lockdown browser, that &amp;ldquo;the university&amp;rdquo; had decided on it. Whether that means there was some vote within the faculty of the computer science department or the dictate was simply handed down university-wide I don&amp;rsquo;t know. I&amp;rsquo;m not very interested in the beaurocracy. He told me that &amp;ldquo;We are under extraordinary circumstances that no one foresaw 3 weeks ago. We&amp;rsquo;ve all had to make changes and exceptions to ways we work&amp;hellip; I highly encourage you to also be sympathetic to the situation and consider making exceptions&amp;rdquo;. After that he offered to help me repartition my machine to install Windows and mentioned that the university offers free legal Windows 10 licenses available to students. So I took the next step and contacted the chair of the CS department at SIUe. He reaffirmed what Professor X had already said and was not willing to have Professor X make an exception.&lt;/p>
&lt;p>So I took Professor X&amp;rsquo;s advice and was sympathetic and considered making an exception. And then after two seconds of thought I decided that dropping the class and refusing to use it was as sympathetic as I can get to proprietary software. I wasn&amp;rsquo;t going to repartition my computer to install the proprietary backdoored malware operating system Windows that could rootkit my machine so that I could install a proprietary malware browser and &amp;ldquo;monitor&amp;rdquo; that purposely spies on and cripples the operating system. And then I realized it&amp;rsquo;s probable that some of my other classes would require Respondus lockdown software as well this semester for the final exam and I couldn&amp;rsquo;t in good conscience use it. Also, it&amp;rsquo;s likely that due to COVID-19 my summer classes would also require using it. Even if those classes didn&amp;rsquo;t require that proprietary software, it became clear to me that there were certainly going to be obstacles I simply couldn&amp;rsquo;t get over in the future without switching professors, retaking classes, and constantly doing extra work without much benefit or change to the software the university was using. All of that could also prolong my graduation by a year, two years, or who knows how long racking up student debt. I had already came so far as I was two semesters away from graduating after this one. However, if I dropped out of SIUe, I would free up enough time to build my portfolio, improve my programming skills, network with free software organizations and potentially get some real-world experience. So, I dropped out. It was at great personal cost to myself, but it was the only ethical option left.&lt;/p></description></item></channel></rss>